searchState.loadedDescShard("reactive_graph_plugin_service_api", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls the activate method of the plugin with the given id.\nReturns true, if all plugins are stopped.\nPerforms a compatibility check on the plugin with the …\nConstructs a plugin proxy object for the plugin with the …\nReturns the count of all plugins.\nReturns the count of plugins with the given state.\nReturns a string withs stats abouts the states of the …\nCreates a new plugin container for a plugin with the given …\nCalls the deactivate method of the plugin with the given …\nDeploys the dynamic linked library file from the plugin …\nReturns the description of the plugin with the given id.\nDisables the plugin with the given id.\nReturns a list of dependency coordinates for the plugin …\nReturns the state of the plugin with the given dependency …\nReturns a list of plugin ids which are dependents of the …\nReturns the id of the plugin with the given file stem.\nReturns the id of the plugin by a dependency coordinate.\nReturns the path of the plugin with the given id.\nReturns the state of the plugin with the given id.\nReturns a list of ids of all plugins.\nReturns a list of ids of plugins which doesn’t have the …\nReturns a list of ids of plugins with the given state.\nReturns a list of ids of plugins which have one of the …\nReturns the file stem of the plugin with the given id.\nReturns a list of unsatisfied dependencies of the plugin …\nReturns true, if a plugin with the given file stem exists.\nReturns true, if the plugin with the given id has one or …\nReturns true, if the plugin with the given id has …\nLoads the dynamic linked library into memory.\nLoads the plugin declaration of the plugin with the given …\nLoads the dependencies of the plugin with the given id.\nReturns the name of the plugin with the given id.\nReturns the canonicalized name of the plugin with the …\nReturns the canonicalized name and version of the plugin …\nReturns the version of the plugin API the plugin with the …\nRedeploys the plugin with the given id.\nRegisters providers of the plugin with the given id.\nReturns the plugin with the given id from the list of …\nRemoves the plugin proxy of the plugin with the given id.\nCalculates the state of the dependencies of the plugin …\nReturns the version of the rust compiler the plugin with …\nSets the given new state of the plugin with the given id.\nStart the plugin with the given id.\nStarts the plugin with the given file stem.\nStarts all plugins which are dependent of the plugin with …\nStops the given plugin. Recursively stops all plugins …\nStops active plugins which have unsatisfied dependencies.\nStops all plugins.\nStops the plugin with the given file stem.\nUninstalls the plugin with the given id.\nDeletes the dynamically linked library file.\nCloses the library by dropping it.\nUnregisters the providers of the plugin with the given id.\nReturns the version of the plugin with the given id.\nScans the plugin installation folder and removes …\nScans the plugin hot deploy folder. Moves plugins to the …\nScans the plugin installation folder. Creates and …\nScans the plugin hot deploy folder.\nReturns the resolve mode.\nRuns the next resolve action.\nResolves plugins until no more resolve action is possible.\nSets the resolve mode.\nStops all plugins until all are stopped.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")