searchState.loadedDescShard("reactive_graph_behaviour_model_api", 0, "Adds a behaviour to the container.\nReturns true, if the reactive instance behaves as the …\nReturns the behaviour types of the container.\nRemoves a behaviour from the container.\nCreating the behaviour failed because connecting the …\nThe property with the given name has a data type which is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the behaviour type of the behaviour factory.\nCreates a new behaviour in the given reactive instance and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the current state of the behaviour.\nReturns the validator.\nReturns the validator.\nReturns the current state of the behaviour.\nExecutes a behaviour transition.\nReturns the current state of the behaviour.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA PropertyObserverContainer manages the observers of a …\nObserves the property with the given name. A handle will …\nPropagates the value from the property with the given name …\nRemoves all observers that are managed by this …\nRemoves the observers of the property with the given name …\nRemoves all observers of the property with the given name …\nThe state of a behaviour.\nThe behaviour is connected.\nThe behaviour has been created.\nThe behaviour is initialized but not connected.\nThe behaviour has been validated.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConnects the reactive streams.\nDisconnects the reactive streams.\nInitializes the behaviour. For example, calculates and …\nReconnects the reactive streams.\nDestructs the behaviour.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe behaviour of a component.\nThe behaviour type.\nCreate a builder for building <code>ComponentBehaviourTypeId</code>. On …\nThe component type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe behaviour of an entity type.\nThe behaviour type.\nCreate a builder for building <code>EntityBehaviourTypeId</code>. On …\nThe entity type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe behaviour of a relation type.\nThe behaviour type.\nCreate a builder for building <code>RelationBehaviourTypeId</code>. On …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe relation type.\nValidates the behaviour.\nValidates the properties of the reactive instance.\nValidates the property with the given name.")