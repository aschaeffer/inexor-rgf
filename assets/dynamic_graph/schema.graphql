# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
}

"Arithmetic operation with two inputs and one result"
interface Arithmetic_ArithmeticGate_Component {
  _c__arithmetic__arithmetic_gate: ID
  lhs: Float
  result: Float
  rhs: Float
}

"Arithmetic operation with one input and one result"
interface Arithmetic_ArithmeticOperation_Component {
  _c__arithmetic__arithmetic_operation: ID
  lhs: Float
  result: Float
}

"The entity or relation has a description."
interface Base_Describable_Component {
  _c__base__describable: ID
  "The description of an entity or a relation"
  description: String
}

"The entity is licensed."
interface Base_Licensed_Component {
  _c__base__licensed: ID
  "Title, author, source and license. Best practices for attribution: https://wiki.creativecommons.org/wiki/best_practices_for_attribution"
  attribution: String
  "The SPDX license identifier. See: https://spdx.org/licenses/"
  license: String
}

"The entity or relation has a name."
interface Base_Named_Component {
  _c__base__named: ID
  "The name of an entity or a relation"
  name: String
}

"The relations between two entities are ordered using a ordinal number associated with sibling relations"
interface Base_Ordered_Component {
  _c__base__ordered: ID
  "The relation ordinal number associated with sibling relations"
  order: Float
}

"The entity is versioned."
interface Base_Versioned_Component {
  _c__base__versioned: ID
  "The version number. Use semantic versioning. See: https://semver.org/"
  version: String
}

interface Binary_BinaryData_Component {
  _c__binary__binary_data: ID
  data_url: String
}

"Loads binary data"
interface Binary_LoadBinaryData_Component {
  _c__binary__load_binary_data: ID
  data_url: String
}

"Saves binary data"
interface Binary_SaveBinaryData_Component {
  _c__binary__save_binary_data: ID
  data_url: String
}

interface Comparison_ComparisonGate_Component {
  _c__comparison__comparison_gate: ID
  lhs: String
  result: Boolean
  rhs: String
}

"Loads a configuration file"
interface Config_ConfigFile_Component {
  _c__config__config_file: ID
  result: String
}

"A buffer of the given size"
interface Connector_Buffer_Component {
  _c__connector__buffer: ID
  "The buffer with up to buffer_size elements"
  buffer: [String]!
  "The number of elements of the buffer"
  buffer_size: Float
}

"Connects a property of an entity instance with a other property of another entity instance"
interface Connector_Connector_Component {
  _c__connector__connector: ID
  "The name of the inbound property"
  inbound_property_name: String
  "The name of the outbound property"
  outbound_property_name: String
}

"Counts the number of propagations"
interface Connector_PropagationCounter_Component {
  _c__connector__propagation_counter: ID
  "The count of propagations"
  propagation_count: Float
}

"This components spawns events."
interface Core_Event_Component {
  _c__core__event: ID
  event: String
}

"The label is an hierarchical path with static segments, named parameters and catch-all parameters."
interface Core_Labeled_Component {
  _c__core__labeled: ID
  label: String
}

"Entities have a outbound relations and a inbound relations as well as components and properties "
interface Entity {
  id: ID!
}

"Represents a file in the file system"
interface File_File_Component {
  _c__file__file: ID
  "The filename"
  filename: String
}

"Triggers if the file with the given filename has been changed"
interface File_FsNotify_Component {
  _c__file__fs_notify: ID
  "The filename"
  filename: String
  "Triggers if the file with the given filename has been changed"
  trigger: Boolean
}

"Sends HTTP request to a given URL"
interface Http_Http_Component {
  _c__http__http: ID
  "The HTTP method"
  method: String
  payload: String
  request_headers: String
  response_headers: String
  result: String
  status: Float
  url: String
}

"Sends JSON-RPC request to a given URL"
interface Http_JsonRpc_Component {
  _c__http__json_rpc: ID
  error: String
  json_rpc_version: String
  method: String
  params: String
  result: String
  url: String
}

"Loads a JSON file"
interface Json_LoadJson_Component {
  _c__json__load_json: ID
  result: String
}

"Saves an object as JSON file"
interface Json_SaveJson_Component {
  _c__json__save_json: ID
  payload: String
}

"An action can be triggered"
interface Logical_Action_Component {
  _c__logical__action: ID
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Depending on the given condition outputs a result"
interface Logical_Condition_Component {
  _c__logical__condition: ID
  "A boolean condition"
  condition: Boolean
  "The result"
  result: String
}

"A generator sends a trigger"
interface Logical_Generator_Component {
  _c__logical__generator: ID
  "Sends a boolean trigger"
  trigger: Boolean
}

"Executes a logical operation on the inputs lhs and rhs and outputs the result"
interface Logical_LogicalGate_Component {
  _c__logical__logical_gate: ID
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

"Executes a logical operation on the input lhs and outputs the result"
interface Logical_LogicalOperation_Component {
  _c__logical__logical_operation: ID
  lhs: Boolean
  result: Boolean
}

interface Metadata_DublinCore_Component {
  _c__metadata__dublin_core: ID
  "An entity responsible for making contributions to the resource."
  dc_contributor: String
  "The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant"
  dc_coverage: String
  "An entity primarily responsible for making the resource"
  dc_creator: String
  "A point or period of time associated with an event in the lifecycle of the resource"
  dc_date: String
  "An account of the resource"
  dc_description: String
  "The file format, physical medium, or dimensions of the resource"
  dc_format: String
  "An unambiguous reference to the resource within a given context"
  dc_identifier: String
  "A language of the resource"
  dc_language: String
  "An entity responsible for making the resource available"
  dc_publisher: String
  "A related resource"
  dc_relation: String
  "Information about rights held in and over the resource"
  dc_rights: String
  "A related resource from which the described resource is derived"
  dc_source: String
  "The topic of the resource"
  dc_subject: String
  "A name given to the resource"
  dc_title: String
  "The nature or genre of the resource"
  dc_type: String
}

interface Metadata_Id3_Component {
  _c__metadata__id3: ID
  id3_talb: String
}

interface Numeric_NumericGate_Component {
  _c__numeric__numeric_gate: ID
  lhs: Float
  result: Float
  rhs: Float
}

interface Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  lhs: Float
  result: Float
}

"Relations have a outbound entity and a inbound entity as well as components and properties,"
interface Relation {
  instance_id: ID!
  key: ID!
}

"State of type array"
interface State_StateArray_Component {
  _c__state__state_array: ID
  set_state: [String]!
  state: [String]!
}

"State of type boolean"
interface State_StateBoolean_Component {
  _c__state__state_boolean: ID
  set_state: Boolean
  state: Boolean
}

interface State_StateDebuggerDebug_Component {
  _c__state__state_debugger_debug: ID
}

interface State_StateDebuggerTrace_Component {
  _c__state__state_debugger_trace: ID
}

"State of type number"
interface State_StateNumber_Component {
  _c__state__state_number: ID
  set_state: Float
  state: Float
}

"State of type object"
interface State_StateObject_Component {
  _c__state__state_object: ID
  set_state: String
  state: String
}

"State of type string"
interface State_StateString_Component {
  _c__state__state_string: ID
  set_state: String
  state: String
}

interface String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  lhs: String
  result: Boolean
}

interface String_StringComparison_Component {
  _c__string__string_comparison: ID
  lhs: String
  result: Boolean
  rhs: String
}

interface String_StringGate_Component {
  _c__string__string_gate: ID
  lhs: String
  result: String
  rhs: String
}

interface String_StringNumberOperation_Component {
  _c__string__string_number_operation: ID
  lhs: String
  result: Float
}

interface String_StringOperation_Component {
  _c__string__string_operation: ID
  lhs: String
  result: String
}

interface String_StringStringNumberGate_Component {
  _c__string__string_string_number_gate: ID
  lhs: String
  result: Float
  rhs: String
}

"Executes a system command"
interface SystemCommand_SystemCommand_Component {
  _c__system_command__system_command: ID
  command: String
  current_dir: String
  parameters: [String]!
  stderr: String
  stdin: String
  stdout: String
}

interface Taxonomy_Weighted_Component {
  _c__taxonomy__weighted: ID
  weight: Float
}

"Value of type array"
interface Value_ValueArray_Component {
  _c__value__value_array: ID
  value: [String]!
}

"Value of type boolean"
interface Value_ValueBoolean_Component {
  _c__value__value_boolean: ID
  value: Boolean
}

interface Value_ValueDebuggerDebug_Component {
  _c__value__value_debugger_debug: ID
}

interface Value_ValueDebuggerTrace_Component {
  _c__value__value_debugger_trace: ID
}

"Value of type number"
interface Value_ValueNumber_Component {
  _c__value__value_number: ID
  value: Float
}

"Value of type object"
interface Value_ValueObject_Component {
  _c__value__value_object: ID
  value: String
}

"Value of type string"
interface Value_ValueString_Component {
  _c__value__value_string: ID
  value: String
}

"Any entity."
union AllEntities = ArithmeticF64_Add_Entity | ArithmeticF64_Decrement_Entity | ArithmeticF64_Div_Entity | ArithmeticF64_Increment_Entity | ArithmeticF64_Max_Entity | ArithmeticF64_Min_Entity | ArithmeticF64_Mod_Entity | ArithmeticF64_Mul_Entity | ArithmeticF64_Sub_Entity | ArithmeticI64_Add_Entity | ArithmeticI64_Decrement_Entity | ArithmeticI64_Div_Entity | ArithmeticI64_Increment_Entity | ArithmeticI64_Max_Entity | ArithmeticI64_Min_Entity | ArithmeticI64_Mod_Entity | ArithmeticI64_Mul_Entity | ArithmeticI64_Sub_Entity | ArithmeticU64_Add_Entity | ArithmeticU64_Counter_Entity | ArithmeticU64_Decrement_Entity | ArithmeticU64_Div_Entity | ArithmeticU64_Increment_Entity | ArithmeticU64_Max_Entity | ArithmeticU64_Min_Entity | ArithmeticU64_Mod_Entity | ArithmeticU64_Mul_Entity | ArithmeticU64_Sub_Entity | Base_Comment_Entity | Binary_LoadBinaryData_Entity | Binary_SaveBinaryData_Entity | Comparison_Equals_Entity | Comparison_GreaterThanOrEquals_Entity | Comparison_GreaterThan_Entity | Comparison_LowerThanOrEquals_Entity | Comparison_LowerThan_Entity | Comparison_NotEquals_Entity | Config_ConfigFile_Entity | Core_Shutdown_Entity | Core_SystemEvent_Entity | Flow_GenericFlow_Entity | Http_Http_Entity | Http_JsonRpc_Entity | Json_ArrayContains_Entity | Json_ArrayGetByIndex_Entity | Json_ArrayLength_Entity | Json_ArrayPop_Entity | Json_ArrayPush_Entity | Json_ArrayReverse_Entity | Json_LoadJson_Entity | Json_ObjectGetProperty_Entity | Json_ObjectKeys_Entity | Json_ObjectRemoveProperty_Entity | Json_ObjectSetProperty_Entity | Json_SaveJson_Entity | Logical_And3_Entity | Logical_And_Entity | Logical_IfThenElse_Entity | Logical_Nand_Entity | Logical_Nor_Entity | Logical_Not_Entity | Logical_Or_Entity | Logical_Toggle_Entity | Logical_Trigger_Entity | Logical_Xnor_Entity | Logical_Xor_Entity | NumericF64_Abs_Entity | NumericF64_Acos_Entity | NumericF64_Acosh_Entity | NumericF64_Asin_Entity | NumericF64_Asinh_Entity | NumericF64_Atan2_Entity | NumericF64_Atan_Entity | NumericF64_Atanh_Entity | NumericF64_Cbrt_Entity | NumericF64_Ceil_Entity | NumericF64_Cos_Entity | NumericF64_Cosh_Entity | NumericF64_Exp2_Entity | NumericF64_Exp_Entity | NumericF64_Floor_Entity | NumericF64_Fract_Entity | NumericF64_Hypot_Entity | NumericF64_Ln_Entity | NumericF64_Log10_Entity | NumericF64_Log2_Entity | NumericF64_Log_Entity | NumericF64_Pow_Entity | NumericF64_Recip_Entity | NumericF64_Round_Entity | NumericF64_Signum_Entity | NumericF64_Sin_Entity | NumericF64_Sinh_Entity | NumericF64_Sqrt_Entity | NumericF64_Tan_Entity | NumericF64_Tanh_Entity | NumericF64_ToDegrees_Entity | NumericF64_ToRadians_Entity | NumericF64_Trunc_Entity | NumericI64_Abs_Entity | NumericI64_Signum_Entity | Random_RandomBool_Entity | Random_RandomF64Pseudo_Entity | Random_RandomF64Range_Entity | Random_RandomF64_Entity | Random_RandomI64Pseudo_Entity | Random_RandomI64Range_Entity | Random_RandomI64_Entity | Random_RandomString_Entity | Random_RandomU64Pseudo_Entity | Random_RandomU64Range_Entity | Random_RandomU64_Entity | Random_RandomUuid_Entity | State_StateArray_Entity | State_StateBoolean_Entity | State_StateNumber_Entity | State_StateObject_Entity | State_StateString_Entity | String_CamelCase_Entity | String_Capitalize_Entity | String_CharCountGraphemes_Entity | String_CharCount_Entity | String_ChopAfterLast_Entity | String_ChopAfter_Entity | String_ChopBeforeLast_Entity | String_ChopBefore_Entity | String_ChopRemovePrefix_Entity | String_ChopRemoveSuffix_Entity | String_Concat_Entity | String_Contains_Entity | String_CountSubstrings_Entity | String_CountUniqueWords_Entity | String_CountWords_Entity | String_Decapitalize_Entity | String_EndsWith_Entity | String_EscapeHtml_Entity | String_EscapeRegexp_Entity | String_IsAlphaDigit_Entity | String_IsAlpha_Entity | String_IsBlank_Entity | String_IsCamelCase_Entity | String_IsCapitalize_Entity | String_IsDecapitalize_Entity | String_IsDigit_Entity | String_IsEmpty_Entity | String_IsKebabCase_Entity | String_IsLowerFirst_Entity | String_IsLowercase_Entity | String_IsNumeric_Entity | String_IsPascalCase_Entity | String_IsShoutyKebabCase_Entity | String_IsShoutySnakeCase_Entity | String_IsSnakeCase_Entity | String_IsTitleCase_Entity | String_IsTrainCase_Entity | String_IsUpperFirst_Entity | String_IsUppercase_Entity | String_KebabCase_Entity | String_LowerFirst_Entity | String_Lowercase_Entity | String_PascalCase_Entity | String_Reverse_Entity | String_ShoutyKebabCase_Entity | String_ShoutySnakeCase_Entity | String_SnakeCase_Entity | String_StartsWith_Entity | String_StringLength_Entity | String_StripHtmlTags_Entity | String_SwapCase_Entity | String_Templating_Entity | String_TitleCase_Entity | String_TrainCase_Entity | String_TrimEnd_Entity | String_TrimStart_Entity | String_Trim_Entity | String_UnescapeHtml_Entity | String_UpperFirst_Entity | String_Uppercase_Entity | SystemCommand_SystemCommand_Entity | System_SystemEnv_Entity | Taxonomy_Category_Entity | Taxonomy_Tag_Entity | Value_ValueArray_Entity | Value_ValueBoolean_Entity | Value_ValueNumber_Entity | Value_ValueObject_Entity | Value_ValueString_Entity

"Subtract an floating point number from another floating point number"
type ArithmeticF64Namespace {
  add: [ArithmeticF64_Add_Entity!]!
  decrement: [ArithmeticF64_Decrement_Entity!]!
  div: [ArithmeticF64_Div_Entity!]!
  increment: [ArithmeticF64_Increment_Entity!]!
  max: [ArithmeticF64_Max_Entity!]!
  min: [ArithmeticF64_Min_Entity!]!
  mod: [ArithmeticF64_Mod_Entity!]!
  mul: [ArithmeticF64_Mul_Entity!]!
  sub: [ArithmeticF64_Sub_Entity!]!
}

"Adds two floating point numbers"
type ArithmeticF64_Add_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Decrements a number"
type ArithmeticF64_Decrement_Entity implements Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
}

"Divides two floating point numbers"
type ArithmeticF64_Div_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Increments a number"
type ArithmeticF64_Increment_Entity implements Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
}

"Returns the maximum value of two inputs"
type ArithmeticF64_Max_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Returns the minimum value of two inputs"
type ArithmeticF64_Min_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Modulo"
type ArithmeticF64_Mod_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Multiply two floating point numbers"
type ArithmeticF64_Mul_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Subtract an floating point number from another floating point number"
type ArithmeticF64_Sub_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Adds two signed integer numbers"
type ArithmeticI64Namespace {
  add: [ArithmeticI64_Add_Entity!]!
  decrement: [ArithmeticI64_Decrement_Entity!]!
  div: [ArithmeticI64_Div_Entity!]!
  increment: [ArithmeticI64_Increment_Entity!]!
  max: [ArithmeticI64_Max_Entity!]!
  min: [ArithmeticI64_Min_Entity!]!
  mod: [ArithmeticI64_Mod_Entity!]!
  mul: [ArithmeticI64_Mul_Entity!]!
  sub: [ArithmeticI64_Sub_Entity!]!
}

"Adds two signed integer numbers"
type ArithmeticI64_Add_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Decrements a signed integer number"
type ArithmeticI64_Decrement_Entity implements Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
}

"Divides two signed integer numbers"
type ArithmeticI64_Div_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Increments a signed integer number"
type ArithmeticI64_Increment_Entity implements Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
}

"Returns the maximum value of two signed integer numbers"
type ArithmeticI64_Max_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Returns the minimum value of two signed integer numbers"
type ArithmeticI64_Min_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Modulo"
type ArithmeticI64_Mod_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Multiply two signed integer numbers"
type ArithmeticI64_Mul_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Subtract an signed integer number from another signed integer number"
type ArithmeticI64_Sub_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Arithmetic operation with two inputs and one result"
type ArithmeticNamespace {
  arithmeticGateComponent: [Arithmetic_ArithmeticGate_Component!]!
  arithmeticOperationComponent: [Arithmetic_ArithmeticOperation_Component!]!
}

"Adds two unsigned integer numbers"
type ArithmeticU64Namespace {
  add: [ArithmeticU64_Add_Entity!]!
  counter: [ArithmeticU64_Counter_Entity!]!
  decrement: [ArithmeticU64_Decrement_Entity!]!
  div: [ArithmeticU64_Div_Entity!]!
  increment: [ArithmeticU64_Increment_Entity!]!
  max: [ArithmeticU64_Max_Entity!]!
  min: [ArithmeticU64_Min_Entity!]!
  mod: [ArithmeticU64_Mod_Entity!]!
  mul: [ArithmeticU64_Mul_Entity!]!
  sub: [ArithmeticU64_Sub_Entity!]!
}

"Adds two unsigned integer numbers"
type ArithmeticU64_Add_Entity implements Arithmetic_ArithmeticGate_Component & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"If triggered the counter will be increased"
type ArithmeticU64_Counter_Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Decrements a unsigned integer number"
type ArithmeticU64_Decrement_Entity implements Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
}

"Divides two unsigned integer numbers"
type ArithmeticU64_Div_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Increments a unsigned integer number"
type ArithmeticU64_Increment_Entity implements Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
}

"Returns the maximum value of two unsigned integer numbers"
type ArithmeticU64_Max_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Returns the minimum value of two unsigned integer numbers"
type ArithmeticU64_Min_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Modulo"
type ArithmeticU64_Mod_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Multiply two unsigned integer numbers"
type ArithmeticU64_Mul_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"Subtract an unsigned integer number from another unsigned integer number"
type ArithmeticU64_Sub_Entity implements Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
}

"A simple comment"
type BaseNamespace {
  comment: [Base_Comment_Entity!]!
  describableComponent: [Base_Describable_Component!]!
  licensedComponent: [Base_Licensed_Component!]!
  namedComponent: [Base_Named_Component!]!
  orderedComponent: [Base_Ordered_Component!]!
  versionedComponent: [Base_Versioned_Component!]!
}

"A simple comment"
type Base_Comment_Entity implements Base_Describable_Component & Base_Named_Component & Entity {
  _c__base__describable: ID
  _c__base__named: ID
  "The description of an entity or a relation"
  description: String
  id: ID!
  "The name of an entity or a relation"
  name: String
}

"Saves binary data"
type BinaryNamespace {
  binaryDataComponent: [Binary_BinaryData_Component!]!
  loadBinaryData: [Binary_LoadBinaryData_Entity!]!
  loadBinaryDataComponent: [Binary_LoadBinaryData_Component!]!
  saveBinaryData: [Binary_SaveBinaryData_Entity!]!
  saveBinaryDataComponent: [Binary_SaveBinaryData_Component!]!
}

"Loads binary data"
type Binary_LoadBinaryData_Entity implements Base_Named_Component & Binary_BinaryData_Component & Binary_LoadBinaryData_Component & Entity & File_File_Component & Logical_Action_Component {
  _c__base__named: ID
  _c__binary__binary_data: ID
  _c__binary__load_binary_data: ID
  _c__file__file: ID
  _c__logical__action: ID
  data_url: String
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Saves binary data"
type Binary_SaveBinaryData_Entity implements Base_Named_Component & Binary_BinaryData_Component & Binary_SaveBinaryData_Component & Entity & File_File_Component & Logical_Action_Component {
  _c__base__named: ID
  _c__binary__binary_data: ID
  _c__binary__save_binary_data: ID
  _c__file__file: ID
  _c__logical__action: ID
  data_url: String
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Checks if lhs not equal to rhs"
type ComparisonNamespace {
  comparisonGateComponent: [Comparison_ComparisonGate_Component!]!
  equals: [Comparison_Equals_Entity!]!
  greaterThan: [Comparison_GreaterThan_Entity!]!
  greaterThanOrEquals: [Comparison_GreaterThanOrEquals_Entity!]!
  lowerThan: [Comparison_LowerThan_Entity!]!
  lowerThanOrEquals: [Comparison_LowerThanOrEquals_Entity!]!
  notEquals: [Comparison_NotEquals_Entity!]!
}

"Checks if lhs is equal to rhs"
type Comparison_Equals_Entity implements Comparison_ComparisonGate_Component & Entity {
  _c__comparison__comparison_gate: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

"Checks if lhs is greater than or equal to rhs"
type Comparison_GreaterThanOrEquals_Entity implements Entity {
  _c__comparison__comparison_gate: ID
  id: ID!
  lhs: Float
  result: Boolean
  rhs: Float
}

"Checks if lhs is greater than rhs"
type Comparison_GreaterThan_Entity implements Entity {
  _c__comparison__comparison_gate: ID
  id: ID!
  lhs: Float
  result: Boolean
  rhs: Float
}

"Checks if lhs is lower than or equal to rhs"
type Comparison_LowerThanOrEquals_Entity implements Entity {
  _c__comparison__comparison_gate: ID
  id: ID!
  lhs: Float
  result: Boolean
  rhs: Float
}

"Checks if lhs is lower than rhs"
type Comparison_LowerThan_Entity implements Entity {
  _c__comparison__comparison_gate: ID
  id: ID!
  lhs: Float
  result: Boolean
  rhs: Float
}

"Checks if lhs not equal to rhs"
type Comparison_NotEquals_Entity implements Comparison_ComparisonGate_Component & Entity {
  _c__comparison__comparison_gate: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

"Loads a configuration file"
type ConfigNamespace {
  configFile: [Config_ConfigFile_Entity!]!
  configFileComponent: [Config_ConfigFile_Component!]!
}

"Loads a configuration file"
type Config_ConfigFile_Entity implements Base_Named_Component & Entity & File_File_Component & Logical_Action_Component {
  _c__base__named: ID
  _c__config__config_file: ID
  _c__file__file: ID
  _c__logical__action: ID
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Connects a property with a other property and logs changes to the trace logger"
type ConnectorNamespace {
  bufferComponent: [Connector_Buffer_Component!]!
  bufferedFifoConnector: [Connector_BufferedFifoConnector_Relation!]!
  connectorComponent: [Connector_Connector_Component!]!
  debounceConnector: [Connector_DebounceConnector_Relation!]!
  debugConnector: [Connector_DebugConnector_Relation!]!
  decrementByConnector: [Connector_DecrementByConnector_Relation!]!
  defaultConnector: [Connector_DefaultConnector_Relation!]!
  delayConnector: [Connector_DelayConnector_Relation!]!
  incrementByConnector: [Connector_IncrementByConnector_Relation!]!
  numericInterpolationConnector: [Connector_NumericInterpolationConnector_Relation!]!
  parseFloatConnector: [Connector_ParseFloatConnector_Relation!]!
  parseIntConnector: [Connector_ParseIntConnector_Relation!]!
  propagationCounterComponent: [Connector_PropagationCounter_Component!]!
  threadedConnector: [Connector_ThreadedConnector_Relation!]!
  toStringConnector: [Connector_ToStringConnector_Relation!]!
  traceConnector: [Connector_TraceConnector_Relation!]!
}

"Connects a property with a other property and buffers the values in a FIFO buffer before propagation"
type Connector_BufferedFifoConnector_Relation implements Connector_Buffer_Component & Connector_Connector_Component & Relation {
  _c__connector__buffer: ID
  _c__connector__connector: ID
  "The buffer with up to buffer_size elements"
  buffer: [String]!
  "The number of elements of the buffer"
  buffer_size: Float
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a property with a other property and propagates the value if and only if the value is different"
type Connector_DebounceConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a property with a other property and logs changes to the debug logger"
type Connector_DebugConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a outbound property with another property. The value of the outbound property will be subtracted from the value of the inbound property."
type Connector_DecrementByConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a property of an entity instance with a other property of another entity instance"
type Connector_DefaultConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a property with a other property after the given milli seconds"
type Connector_DelayConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  "The delay in milli seconds"
  delay: Float
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a outbound property with another property. The value of the outbound property will be added to the value of the inbound property."
type Connector_IncrementByConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a property with a other property and interpolate the numeric values before propagation"
type Connector_NumericInterpolationConnector_Relation implements Connector_Buffer_Component & Connector_Connector_Component & Relation {
  _c__connector__buffer: ID
  _c__connector__connector: ID
  "The buffer with up to buffer_size elements"
  buffer: [String]!
  "The number of elements of the buffer"
  buffer_size: Float
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects an string property of an entity instance with a number property of another entity instance. Outgoing string point values gets converted to floating point numbers if possible"
type Connector_ParseFloatConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects an string property of an entity instance with a number property of another entity instance. Outgoing string values gets converted to integer numbers if possible"
type Connector_ParseIntConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a property with a other property. The propagation will run in a new thread"
type Connector_ThreadedConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects an number property of an entity instance with a string property of another entity instance. Outgoing integer values gets converted to string"
type Connector_ToStringConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a property with a other property and logs changes to the trace logger"
type Connector_TraceConnector_Relation implements Connector_Connector_Component & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  instance_id: ID!
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type CoreNamespace {
  eventComponent: [Core_Event_Component!]!
  labeledComponent: [Core_Labeled_Component!]!
  shutdown: [Core_Shutdown_Entity!]!
  systemEvent: [Core_SystemEvent_Entity!]!
}

type Core_Shutdown_Entity implements Core_Labeled_Component & Entity {
  _c__core__labeled: ID
  _c__logical__action: ID
  id: ID!
  label: String
  shutdown: Boolean
  trigger: Boolean
}

"Events of the type system"
type Core_SystemEvent_Entity implements Core_Event_Component & Core_Labeled_Component & Entity {
  _c__core__event: ID
  _c__core__labeled: ID
  event: String
  id: ID!
  label: String
}

"Triggers if the file with the given filename has been changed"
type FileNamespace {
  fileComponent: [File_File_Component!]!
  fsNotifyComponent: [File_FsNotify_Component!]!
}

"Generic flow without inputs and outputs"
type FlowNamespace {
  genericFlow: [Flow_GenericFlow_Entity!]!
}

"Generic flow without inputs and outputs"
type Flow_GenericFlow_Entity implements Core_Labeled_Component & Entity {
  _c__core__labeled: ID
  id: ID!
  label: String
}

"Sends JSON-RPC request to a given URL"
type HttpNamespace {
  http: [Http_Http_Entity!]!
  httpComponent: [Http_Http_Component!]!
  jsonRpc: [Http_JsonRpc_Entity!]!
  jsonRpcComponent: [Http_JsonRpc_Component!]!
}

"Sends HTTP request to a given URL"
type Http_Http_Entity implements Entity & Http_Http_Component {
  _c__http__http: ID
  _c__logical__action: ID
  id: ID!
  "The HTTP method"
  method: String
  payload: String
  request_headers: String
  response_headers: String
  result: String
  status: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
  url: String
}

"Sends JSON-RPC request to a given URL"
type Http_JsonRpc_Entity implements Entity & Logical_Action_Component {
  _c__http__json_rpc: ID
  _c__logical__action: ID
  id: ID!
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Saves an object as JSON file"
type JsonNamespace {
  arrayContains: [Json_ArrayContains_Entity!]!
  arrayGetByIndex: [Json_ArrayGetByIndex_Entity!]!
  arrayLength: [Json_ArrayLength_Entity!]!
  arrayPop: [Json_ArrayPop_Entity!]!
  arrayPush: [Json_ArrayPush_Entity!]!
  arrayReverse: [Json_ArrayReverse_Entity!]!
  loadJson: [Json_LoadJson_Entity!]!
  loadJsonComponent: [Json_LoadJson_Component!]!
  objectGetProperty: [Json_ObjectGetProperty_Entity!]!
  objectKeys: [Json_ObjectKeys_Entity!]!
  objectRemoveProperty: [Json_ObjectRemoveProperty_Entity!]!
  objectSetProperty: [Json_ObjectSetProperty_Entity!]!
  saveJson: [Json_SaveJson_Entity!]!
  saveJsonComponent: [Json_SaveJson_Component!]!
}

"Array Contains"
type Json_ArrayContains_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  array: [String]!
  id: ID!
  "The name of an entity or a relation"
  name: String
  result: Boolean
  search: String
}

"Array Get By Index"
type Json_ArrayGetByIndex_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  array: [String]!
  id: ID!
  index: Float
  "The name of an entity or a relation"
  name: String
  result: String
}

"Array Length"
type Json_ArrayLength_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  array: [String]!
  id: ID!
  length: Float
  "The name of an entity or a relation"
  name: String
}

"Array Pop"
type Json_ArrayPop_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  array: [String]!
  id: ID!
  "The name of an entity or a relation"
  name: String
  result: [String]!
  value: String
}

"Array Push"
type Json_ArrayPush_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  array: [String]!
  id: ID!
  "The name of an entity or a relation"
  name: String
  result: [String]!
  value: String
}

"Array Reverse"
type Json_ArrayReverse_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  array: [String]!
  id: ID!
  "The name of an entity or a relation"
  name: String
  result: [String]!
}

"Loads a JSON file"
type Json_LoadJson_Entity implements Base_Named_Component & Entity & File_File_Component & Logical_Action_Component {
  _c__base__named: ID
  _c__file__file: ID
  _c__json__load_json: ID
  _c__logical__action: ID
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Object Get Property"
type Json_ObjectGetProperty_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  object: String
  property_name: String
  result: String
}

"Object Keys"
type Json_ObjectKeys_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  id: ID!
  keys: [String]!
  "The name of an entity or a relation"
  name: String
  object: String
}

"Object Remove Property"
type Json_ObjectRemoveProperty_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  object: String
  property_name: String
  result: String
}

"Object Set Property"
type Json_ObjectSetProperty_Entity implements Base_Named_Component & Entity {
  _c__base__named: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  object: String
  property_name: String
  result: String
  value: String
}

"Saves an object as JSON file"
type Json_SaveJson_Entity implements Base_Named_Component & Entity & File_File_Component & Json_SaveJson_Component & Logical_Action_Component {
  _c__base__named: ID
  _c__file__file: ID
  _c__json__save_json: ID
  _c__logical__action: ID
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  payload: String
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"XOR"
type LogicalNamespace {
  actionComponent: [Logical_Action_Component!]!
  and: [Logical_And_Entity!]!
  and3: [Logical_And3_Entity!]!
  conditionComponent: [Logical_Condition_Component!]!
  generatorComponent: [Logical_Generator_Component!]!
  ifThenElse: [Logical_IfThenElse_Entity!]!
  logicalGateComponent: [Logical_LogicalGate_Component!]!
  logicalOperationComponent: [Logical_LogicalOperation_Component!]!
  nand: [Logical_Nand_Entity!]!
  nor: [Logical_Nor_Entity!]!
  not: [Logical_Not_Entity!]!
  or: [Logical_Or_Entity!]!
  toggle: [Logical_Toggle_Entity!]!
  trigger: [Logical_Trigger_Entity!]!
  xnor: [Logical_Xnor_Entity!]!
  xor: [Logical_Xor_Entity!]!
}

"An AND Gate with three inputs"
type Logical_And3_Entity implements Entity {
  id: ID!
  input1: Boolean
  input2: Boolean
  input3: Boolean
  result: Boolean
}

"AND"
type Logical_And_Entity implements Entity & Logical_LogicalGate_Component {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

"Each time it's triggered, either the then-payload or the else-payload gets propagated"
type Logical_IfThenElse_Entity implements Entity & Logical_Condition_Component {
  _c__logical__condition: ID
  "A boolean condition"
  condition: Boolean
  "If the condition is false, the else_payload gets propagated"
  else_payload: String
  id: ID!
  "The result"
  result: String
  "If the condition is true, the then_payload gets propagated"
  then_payload: String
}

"NAND"
type Logical_Nand_Entity implements Entity & Logical_LogicalGate_Component {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

"NOR"
type Logical_Nor_Entity implements Entity & Logical_LogicalGate_Component {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

"NOT"
type Logical_Not_Entity implements Entity & Logical_LogicalOperation_Component {
  _c__logical__logical_operation: ID
  id: ID!
  lhs: Boolean
  result: Boolean
}

"OR"
type Logical_Or_Entity implements Entity & Logical_LogicalGate_Component {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

"If triggered the state will toggled"
type Logical_Toggle_Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Boolean
}

"If triggered the payload will be copied to the output"
type Logical_Trigger_Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  payload: String
}

"XNOR"
type Logical_Xnor_Entity implements Entity & Logical_LogicalGate_Component {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

"XOR"
type Logical_Xor_Entity implements Entity & Logical_LogicalGate_Component {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

type MetadataNamespace {
  dublinCoreComponent: [Metadata_DublinCore_Component!]!
  id3Component: [Metadata_Id3_Component!]!
}

"Returns the integer part of a number"
type NumericF64Namespace {
  abs: [NumericF64_Abs_Entity!]!
  acos: [NumericF64_Acos_Entity!]!
  acosh: [NumericF64_Acosh_Entity!]!
  asin: [NumericF64_Asin_Entity!]!
  asinh: [NumericF64_Asinh_Entity!]!
  atan: [NumericF64_Atan_Entity!]!
  atan2: [NumericF64_Atan2_Entity!]!
  atanh: [NumericF64_Atanh_Entity!]!
  cbrt: [NumericF64_Cbrt_Entity!]!
  ceil: [NumericF64_Ceil_Entity!]!
  cos: [NumericF64_Cos_Entity!]!
  cosh: [NumericF64_Cosh_Entity!]!
  exp: [NumericF64_Exp_Entity!]!
  exp2: [NumericF64_Exp2_Entity!]!
  floor: [NumericF64_Floor_Entity!]!
  fract: [NumericF64_Fract_Entity!]!
  hypot: [NumericF64_Hypot_Entity!]!
  ln: [NumericF64_Ln_Entity!]!
  log: [NumericF64_Log_Entity!]!
  log10: [NumericF64_Log10_Entity!]!
  log2: [NumericF64_Log2_Entity!]!
  pow: [NumericF64_Pow_Entity!]!
  recip: [NumericF64_Recip_Entity!]!
  round: [NumericF64_Round_Entity!]!
  signum: [NumericF64_Signum_Entity!]!
  sin: [NumericF64_Sin_Entity!]!
  sinh: [NumericF64_Sinh_Entity!]!
  sqrt: [NumericF64_Sqrt_Entity!]!
  tan: [NumericF64_Tan_Entity!]!
  tanh: [NumericF64_Tanh_Entity!]!
  toDegrees: [NumericF64_ToDegrees_Entity!]!
  toRadians: [NumericF64_ToRadians_Entity!]!
  trunc: [NumericF64_Trunc_Entity!]!
}

"Computes the absolute value"
type NumericF64_Abs_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Computes the arccosine of a number"
type NumericF64_Acos_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Inverse hyperbolic cosine function"
type NumericF64_Acosh_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Computes the arcsine of a number"
type NumericF64_Asin_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Inverse hyperbolic sine function"
type NumericF64_Asinh_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Computes the four quadrant arctangent in radians"
type NumericF64_Atan2_Entity implements Entity & Numeric_NumericGate_Component {
  _c__numeric__numeric_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Computes the arctangent of a number"
type NumericF64_Atan_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Inverse hyperbolic tangent function"
type NumericF64_Atanh_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the cube root of a number"
type NumericF64_Cbrt_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the smallest integer greater than or equal to a number"
type NumericF64_Ceil_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Computes the cosine of a number (in radians)"
type NumericF64_Cos_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Hyperbolic cosine function"
type NumericF64_Cosh_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns 2^(input)"
type NumericF64_Exp2_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns e^(input), (the exponential function)"
type NumericF64_Exp_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the largest integer less than or equal to a number"
type NumericF64_Floor_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the fractional part of a number"
type NumericF64_Fract_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Calculates the length of the hypotenuse of a right-angle triangle given legs of length x and y"
type NumericF64_Hypot_Entity implements Entity & Numeric_NumericGate_Component {
  _c__numeric__numeric_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Returns the natural logarithm of the number"
type NumericF64_Ln_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the base 10 logarithm of the number"
type NumericF64_Log10_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the base 2 logarithm of the number"
type NumericF64_Log2_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the logarithm of the number with respect to an arbitrary base"
type NumericF64_Log_Entity implements Entity & Numeric_NumericGate_Component {
  _c__numeric__numeric_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Raises a number to a power"
type NumericF64_Pow_Entity implements Entity & Numeric_NumericGate_Component {
  _c__numeric__numeric_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Takes the reciprocal (inverse) of a number, 1/x"
type NumericF64_Recip_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the nearest integer to a number. Round half-way cases away from 0.0"
type NumericF64_Round_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns a number that represents the sign of the input"
type NumericF64_Signum_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Computes the sine of a number (in radians)"
type NumericF64_Sin_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Hyperbolic sine function"
type NumericF64_Sinh_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the square root of a number"
type NumericF64_Sqrt_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Computes the tangent of a number (in radians)"
type NumericF64_Tan_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Hyperbolic tangent function"
type NumericF64_Tanh_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Converts radians to degrees"
type NumericF64_ToDegrees_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Converts degrees to radians"
type NumericF64_ToRadians_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the integer part of a number"
type NumericF64_Trunc_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns a number that represents the sign of the input"
type NumericI64Namespace {
  abs: [NumericI64_Abs_Entity!]!
  signum: [NumericI64_Signum_Entity!]!
}

"Computes the absolute value"
type NumericI64_Abs_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns a number that represents the sign of the input"
type NumericI64_Signum_Entity implements Entity & Numeric_NumericOperation_Component {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type NumericNamespace {
  numericGateComponent: [Numeric_NumericGate_Component!]!
  numericOperationComponent: [Numeric_NumericOperation_Component!]!
}

type Query {
  arithmetic: ArithmeticNamespace!
  arithmeticF64: ArithmeticF64Namespace!
  arithmeticI64: ArithmeticI64Namespace!
  arithmeticU64: ArithmeticU64Namespace!
  base: BaseNamespace!
  binary: BinaryNamespace!
  comparison: ComparisonNamespace!
  config: ConfigNamespace!
  connector: ConnectorNamespace!
  core: CoreNamespace!
  file: FileNamespace!
  flow: FlowNamespace!
  http: HttpNamespace!
  json: JsonNamespace!
  logical: LogicalNamespace!
  metadata: MetadataNamespace!
  numeric: NumericNamespace!
  numericF64: NumericF64Namespace!
  numericI64: NumericI64Namespace!
  random: RandomNamespace!
  state: StateNamespace!
  string: StringNamespace!
  system: SystemNamespace!
  systemCommand: SystemCommandNamespace!
  taxonomy: TaxonomyNamespace!
  value: ValueNamespace!
}

"Random UUID"
type RandomNamespace {
  randomBool: [Random_RandomBool_Entity!]!
  randomF64: [Random_RandomF64_Entity!]!
  randomF64Pseudo: [Random_RandomF64Pseudo_Entity!]!
  randomF64Range: [Random_RandomF64Range_Entity!]!
  randomI64: [Random_RandomI64_Entity!]!
  randomI64Pseudo: [Random_RandomI64Pseudo_Entity!]!
  randomI64Range: [Random_RandomI64Range_Entity!]!
  randomString: [Random_RandomString_Entity!]!
  randomU64: [Random_RandomU64_Entity!]!
  randomU64Pseudo: [Random_RandomU64Pseudo_Entity!]!
  randomU64Range: [Random_RandomU64Range_Entity!]!
  randomUuid: [Random_RandomUuid_Entity!]!
}

"Random Bool"
type Random_RandomBool_Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Boolean
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Pseudo Random Floating Point Number"
type Random_RandomF64Pseudo_Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Float
  seed: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random Floating Point Number Within Range"
type Random_RandomF64Range_Entity implements Entity {
  _c__logical__action: ID
  high: Float
  id: ID!
  low: Float
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random Floating Point Number"
type Random_RandomF64_Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Pseudo Random Signed Integer Number"
type Random_RandomI64Pseudo_Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Float
  seed: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random Signed Integer Within Range"
type Random_RandomI64Range_Entity implements Entity {
  _c__logical__action: ID
  high: Float
  id: ID!
  low: Float
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random Signed Integer Number"
type Random_RandomI64_Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random String"
type Random_RandomString_Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  length: Float
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Pseudo Random Unsigned Integer Number"
type Random_RandomU64Pseudo_Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Float
  seed: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random Unsigned Integer Within Range"
type Random_RandomU64Range_Entity implements Entity {
  _c__logical__action: ID
  high: Float
  id: ID!
  low: Float
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random Unsigned Integer Number"
type Random_RandomU64_Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random UUID"
type Random_RandomUuid_Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"State of type string"
type StateNamespace {
  stateArray: [State_StateArray_Entity!]!
  stateArrayComponent: [State_StateArray_Component!]!
  stateBoolean: [State_StateBoolean_Entity!]!
  stateBooleanComponent: [State_StateBoolean_Component!]!
  stateDebuggerDebugComponent: [State_StateDebuggerDebug_Component!]!
  stateDebuggerTraceComponent: [State_StateDebuggerTrace_Component!]!
  stateNumber: [State_StateNumber_Entity!]!
  stateNumberComponent: [State_StateNumber_Component!]!
  stateObject: [State_StateObject_Entity!]!
  stateObjectComponent: [State_StateObject_Component!]!
  stateString: [State_StateString_Entity!]!
  stateStringComponent: [State_StateString_Component!]!
}

"State of type array"
type State_StateArray_Entity implements Base_Named_Component & Entity & State_StateArray_Component & Value_ValueArray_Component {
  _c__base__named: ID
  _c__state__state_array: ID
  _c__value__value_array: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: [String]!
  state: [String]!
  value: [String]!
}

"State of type boolean"
type State_StateBoolean_Entity implements Base_Named_Component & Entity & State_StateBoolean_Component & Value_ValueBoolean_Component {
  _c__base__named: ID
  _c__state__state_boolean: ID
  _c__value__value_boolean: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: Boolean
  state: Boolean
  value: Boolean
}

"State of type number"
type State_StateNumber_Entity implements Base_Named_Component & Entity & State_StateNumber_Component & Value_ValueNumber_Component {
  _c__base__named: ID
  _c__state__state_number: ID
  _c__value__value_number: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: Float
  state: Float
  value: Float
}

"State of type object"
type State_StateObject_Entity implements Base_Named_Component & Entity & State_StateObject_Component & Value_ValueObject_Component {
  _c__base__named: ID
  _c__state__state_object: ID
  _c__value__value_object: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: String
  state: String
  value: String
}

"State of type string"
type State_StateString_Entity implements Base_Named_Component & Entity & State_StateString_Component & Value_ValueString_Component {
  _c__base__named: ID
  _c__state__state_string: ID
  _c__value__value_string: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: String
  state: String
  value: String
}

"Uppercase"
type StringNamespace {
  camelCase: [String_CamelCase_Entity!]!
  capitalize: [String_Capitalize_Entity!]!
  charCount: [String_CharCount_Entity!]!
  charCountGraphemes: [String_CharCountGraphemes_Entity!]!
  chopAfter: [String_ChopAfter_Entity!]!
  chopAfterLast: [String_ChopAfterLast_Entity!]!
  chopBefore: [String_ChopBefore_Entity!]!
  chopBeforeLast: [String_ChopBeforeLast_Entity!]!
  chopRemovePrefix: [String_ChopRemovePrefix_Entity!]!
  chopRemoveSuffix: [String_ChopRemoveSuffix_Entity!]!
  concat: [String_Concat_Entity!]!
  contains: [String_Contains_Entity!]!
  countSubstrings: [String_CountSubstrings_Entity!]!
  countUniqueWords: [String_CountUniqueWords_Entity!]!
  countWords: [String_CountWords_Entity!]!
  decapitalize: [String_Decapitalize_Entity!]!
  endsWith: [String_EndsWith_Entity!]!
  escapeHtml: [String_EscapeHtml_Entity!]!
  escapeRegexp: [String_EscapeRegexp_Entity!]!
  isAlpha: [String_IsAlpha_Entity!]!
  isAlphaDigit: [String_IsAlphaDigit_Entity!]!
  isBlank: [String_IsBlank_Entity!]!
  isCamelCase: [String_IsCamelCase_Entity!]!
  isCapitalize: [String_IsCapitalize_Entity!]!
  isDecapitalize: [String_IsDecapitalize_Entity!]!
  isDigit: [String_IsDigit_Entity!]!
  isEmpty: [String_IsEmpty_Entity!]!
  isKebabCase: [String_IsKebabCase_Entity!]!
  isLowerFirst: [String_IsLowerFirst_Entity!]!
  isLowercase: [String_IsLowercase_Entity!]!
  isNumeric: [String_IsNumeric_Entity!]!
  isPascalCase: [String_IsPascalCase_Entity!]!
  isShoutyKebabCase: [String_IsShoutyKebabCase_Entity!]!
  isShoutySnakeCase: [String_IsShoutySnakeCase_Entity!]!
  isSnakeCase: [String_IsSnakeCase_Entity!]!
  isTitleCase: [String_IsTitleCase_Entity!]!
  isTrainCase: [String_IsTrainCase_Entity!]!
  isUpperFirst: [String_IsUpperFirst_Entity!]!
  isUppercase: [String_IsUppercase_Entity!]!
  kebabCase: [String_KebabCase_Entity!]!
  lowerFirst: [String_LowerFirst_Entity!]!
  lowercase: [String_Lowercase_Entity!]!
  pascalCase: [String_PascalCase_Entity!]!
  reverse: [String_Reverse_Entity!]!
  shoutyKebabCase: [String_ShoutyKebabCase_Entity!]!
  shoutySnakeCase: [String_ShoutySnakeCase_Entity!]!
  snakeCase: [String_SnakeCase_Entity!]!
  startsWith: [String_StartsWith_Entity!]!
  stringBoolOperationComponent: [String_StringBoolOperation_Component!]!
  stringComparisonComponent: [String_StringComparison_Component!]!
  stringGateComponent: [String_StringGate_Component!]!
  stringLength: [String_StringLength_Entity!]!
  stringNumberOperationComponent: [String_StringNumberOperation_Component!]!
  stringOperationComponent: [String_StringOperation_Component!]!
  stringStringNumberGateComponent: [String_StringStringNumberGate_Component!]!
  stripHtmlTags: [String_StripHtmlTags_Entity!]!
  swapCase: [String_SwapCase_Entity!]!
  templating: [String_Templating_Entity!]!
  titleCase: [String_TitleCase_Entity!]!
  trainCase: [String_TrainCase_Entity!]!
  trim: [String_Trim_Entity!]!
  trimEnd: [String_TrimEnd_Entity!]!
  trimStart: [String_TrimStart_Entity!]!
  unescapeHtml: [String_UnescapeHtml_Entity!]!
  upperFirst: [String_UpperFirst_Entity!]!
  uppercase: [String_Uppercase_Entity!]!
}

"Converts the input to camel case"
type String_CamelCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the first character of the input to upper case and convert the rest of the input to lower case"
type String_Capitalize_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Counts the graphemes in the input string taking care of surrogate pairs and combining marks"
type String_CharCountGraphemes_Entity implements Entity & String_StringNumberOperation_Component {
  _c__string__string_number_operation: ID
  id: ID!
  lhs: String
  result: Float
}

"Counts the characters"
type String_CharCount_Entity implements Entity & String_StringNumberOperation_Component {
  _c__string__string_number_operation: ID
  id: ID!
  lhs: String
  result: Float
}

"Returns everything after the last given search"
type String_ChopAfterLast_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Returns everything after the given search"
type String_ChopAfter_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Returns everything before the last given search"
type String_ChopBeforeLast_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Returns everything before the given search"
type String_ChopBefore_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Extracts the prefix from the input"
type String_ChopRemovePrefix_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Extracts the suffix from the input"
type String_ChopRemoveSuffix_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Concat"
type String_Concat_Entity implements Entity & String_StringGate_Component {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Contains"
type String_Contains_Entity implements Entity & String_StringComparison_Component {
  _c__string__string_comparison: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

"Counts the number of substring appearances in the input string"
type String_CountSubstrings_Entity implements Entity & String_StringStringNumberGate_Component {
  _c__string__string_string_number_gate: ID
  id: ID!
  lhs: String
  result: Float
  rhs: String
}

"Counting occurrences of unique words in the input string. This function respects unicode"
type String_CountUniqueWords_Entity implements Entity & String_StringStringNumberGate_Component {
  _c__string__string_string_number_gate: ID
  id: ID!
  lhs: String
  result: Float
  rhs: String
}

"Counts the number of words in the input string"
type String_CountWords_Entity implements Entity & String_StringStringNumberGate_Component {
  _c__string__string_string_number_gate: ID
  id: ID!
  lhs: String
  result: Float
  rhs: String
}

"Converts the first character of the input to lower case and convert the rest of the input to lower case"
type String_Decapitalize_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Ends With"
type String_EndsWith_Entity implements Entity & String_StringComparison_Component {
  _c__string__string_comparison: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

"Escapes HTML special characters"
type String_EscapeHtml_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Escapes the regular expression special characters"
type String_EscapeRegexp_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Checks whether the input string contains contains only alpha and digit characters"
type String_IsAlphaDigit_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string contains only alpha characters"
type String_IsAlpha_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is empty or contains only whitespaces"
type String_IsBlank_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is camelCased"
type String_IsCamelCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is capitalized and the rest of the input string is lower case"
type String_IsCapitalize_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is decapitalized and the rest of the input string is converted to lower case"
type String_IsDecapitalize_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string contains only digit characters"
type String_IsDigit_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is empty"
type String_IsEmpty_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is kebab-cased"
type String_IsKebabCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string has the first character in lower case"
type String_IsLowerFirst_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string has only lower case characters"
type String_IsLowercase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is numeric"
type String_IsNumeric_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is PascalCased"
type String_IsPascalCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is SHOUTY-KEBAB-CASED"
type String_IsShoutyKebabCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is SHOUTY_SNAKE_CASED"
type String_IsShoutySnakeCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is snake_cased"
type String_IsSnakeCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is a titlecased string and there is at least one character"
type String_IsTitleCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is Train-Cased"
type String_IsTrainCase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string has the first character in upper case"
type String_IsUpperFirst_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string has only upper case characters"
type String_IsUppercase_Entity implements Entity & String_StringBoolOperation_Component {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Converts the input to kebab case"
type String_KebabCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the first character of the input to lower case"
type String_LowerFirst_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Lowercase"
type String_Lowercase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the input to pascal case"
type String_PascalCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Reverses the given string"
type String_Reverse_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the input to SHOUTY kebab case"
type String_ShoutyKebabCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the title to SHOUTY snake case"
type String_ShoutySnakeCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the subject to snake case"
type String_SnakeCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Starts With"
type String_StartsWith_Entity implements Entity & String_StringComparison_Component {
  _c__string__string_comparison: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

"Returns the length of the input string"
type String_StringLength_Entity implements Entity & String_StringNumberOperation_Component {
  _c__string__string_number_operation: ID
  id: ID!
  lhs: String
  result: Float
}

"Strips all HTML tags"
type String_StripHtmlTags_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the uppercase alpha characters of the input to lowercase and lowercase characters to uppercase"
type String_SwapCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Renders a template"
type String_Templating_Entity implements Entity {
  context: String
  id: ID!
  result: String
  template: String
}

"Converts the input to title case"
type String_TitleCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the input to train case"
type String_TrainCase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Trim  End"
type String_TrimEnd_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Trim  Start"
type String_TrimStart_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Trim"
type String_Trim_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Unescapes HTML special characters"
type String_UnescapeHtml_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the first character of the title to upper case"
type String_UpperFirst_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Uppercase"
type String_Uppercase_Entity implements Entity & String_StringOperation_Component {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Executes a system command"
type SystemCommandNamespace {
  systemCommand: [SystemCommand_SystemCommand_Entity!]!
  systemCommandComponent: [SystemCommand_SystemCommand_Component!]!
}

"Executes a system command"
type SystemCommand_SystemCommand_Entity implements Base_Named_Component & Entity & Logical_Action_Component & SystemCommand_SystemCommand_Component {
  _c__base__named: ID
  _c__logical__action: ID
  _c__system_command__system_command: ID
  command: String
  current_dir: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  parameters: [String]!
  "The result"
  result: String
  stderr: String
  stdin: String
  stdout: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"System Environment Variable"
type SystemNamespace {
  systemEnv: [System_SystemEnv_Entity!]!
}

"System Environment Variable"
type System_SystemEnv_Entity implements Base_Named_Component & Core_Labeled_Component & Entity & Value_ValueString_Component {
  _c__base__named: ID
  _c__core__labeled: ID
  _c__value__value_string: ID
  id: ID!
  label: String
  "The name of an entity or a relation"
  name: String
  value: String
}

"The outbound entity is tagged with the inbound tag"
type TaxonomyNamespace {
  categorizedAs: [Taxonomy_CategorizedAs_Relation!]!
  category: [Taxonomy_Category_Entity!]!
  hasSubcategory: [Taxonomy_HasSubcategory_Relation!]!
  tag: [Taxonomy_Tag_Entity!]!
  taggedWith: [Taxonomy_TaggedWith_Relation!]!
  weightedComponent: [Taxonomy_Weighted_Component!]!
}

"The outbound entity is categorized as the inbound category"
type Taxonomy_CategorizedAs_Relation implements Relation & Taxonomy_Weighted_Component {
  _c__taxonomy__weighted: ID
  "The entity which is categorized."
  categorized_entity: AllEntities!
  "The category."
  category: Taxonomy_Category_Entity!
  instance_id: ID!
  key: ID!
  weight: Float
}

"A category is a fundamental and distinct class to which entities or concepts belong"
type Taxonomy_Category_Entity implements Base_Describable_Component & Base_Named_Component & Entity {
  _c__base__describable: ID
  _c__base__named: ID
  "The relations between the category and the categorized entities."
  categorized_as: [Taxonomy_CategorizedAs_Relation!]!
  "The category categorizes these entities."
  categorizes: [AllEntities!]!
  "The description of an entity or a relation"
  description: String
  "The parent categories."
  has_parent_categories: [Taxonomy_HasSubcategory_Relation!]!
  "The sub categories."
  has_sub_categories: [Taxonomy_HasSubcategory_Relation!]!
  id: ID!
  "The name of an entity or a relation"
  name: String
  "The parent categories."
  parent_categories: [Taxonomy_Category_Entity!]!
  "The sub categories."
  sub_categories: [Taxonomy_Category_Entity!]!
}

"The outbound category has the inbound entity as sub category"
type Taxonomy_HasSubcategory_Relation implements Relation & Taxonomy_Weighted_Component {
  _c__taxonomy__weighted: ID
  instance_id: ID!
  key: ID!
  "The parent category."
  parent_category: Taxonomy_Category_Entity!
  "The sub category."
  sub_category: Taxonomy_Category_Entity!
  weight: Float
}

"A tag is a piece of information that describes the data or content that it is assigned to. Tags are nonhierarchical keywords used for Internet bookmarks, digital images, videos, files and so on. A tag doesn't carry any information or semantics itself."
type Taxonomy_Tag_Entity implements Base_Named_Component & Core_Labeled_Component & Entity {
  _c__base__named: ID
  _c__core__labeled: ID
  id: ID!
  label: String
  "The name of an entity or a relation"
  name: String
  "Entities which are tagged by this tag."
  tagged_entities: [AllEntities!]!
  "The weighted relations between the tag and the tagged entities."
  tags_entities: [Taxonomy_TaggedWith_Relation!]!
}

"The outbound entity is tagged with the inbound tag"
type Taxonomy_TaggedWith_Relation implements Core_Labeled_Component & Relation & Taxonomy_Weighted_Component {
  _c__core__labeled: ID
  _c__taxonomy__weighted: ID
  instance_id: ID!
  key: ID!
  label: String
  "The tag."
  tag: Taxonomy_Tag_Entity!
  "The entity which is tagged."
  tagged_entity: AllEntities!
  weight: Float
}

"Value of type string"
type ValueNamespace {
  valueArray: [Value_ValueArray_Entity!]!
  valueArrayComponent: [Value_ValueArray_Component!]!
  valueBoolean: [Value_ValueBoolean_Entity!]!
  valueBooleanComponent: [Value_ValueBoolean_Component!]!
  valueDebuggerDebugComponent: [Value_ValueDebuggerDebug_Component!]!
  valueDebuggerTraceComponent: [Value_ValueDebuggerTrace_Component!]!
  valueNumber: [Value_ValueNumber_Entity!]!
  valueNumberComponent: [Value_ValueNumber_Component!]!
  valueObject: [Value_ValueObject_Entity!]!
  valueObjectComponent: [Value_ValueObject_Component!]!
  valueString: [Value_ValueString_Entity!]!
  valueStringComponent: [Value_ValueString_Component!]!
}

"Value of type array"
type Value_ValueArray_Entity implements Base_Named_Component & Entity & Value_ValueArray_Component {
  _c__base__named: ID
  _c__value__value_array: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: [String]!
}

"Value of type boolean"
type Value_ValueBoolean_Entity implements Base_Named_Component & Entity & Value_ValueBoolean_Component {
  _c__base__named: ID
  _c__value__value_boolean: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: Boolean
}

"Value of type number"
type Value_ValueNumber_Entity implements Base_Named_Component & Entity & Value_ValueNumber_Component {
  _c__base__named: ID
  _c__value__value_number: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: Float
}

"Value of type object"
type Value_ValueObject_Entity implements Base_Named_Component & Entity & Value_ValueObject_Component {
  _c__base__named: ID
  _c__value__value_object: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: String
}

"Value of type string"
type Value_ValueString_Entity implements Base_Named_Component & Entity & Value_ValueString_Component {
  _c__base__named: ID
  _c__value__value_string: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: String
}
