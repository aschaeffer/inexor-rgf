# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
}

"Arithmetic operation with two inputs and one result"
interface ArithmeticArithmeticGateComponent {
  _c__arithmetic__arithmetic_gate: ID
  lhs: Float
  result: Float
  rhs: Float
}

"Arithmetic operation with one input and one result"
interface ArithmeticArithmeticOperationComponent {
  _c__arithmetic__arithmetic_operation: ID
  lhs: Float
  result: Float
}

"The entity or relation has a description."
interface BaseDescribableComponent {
  _c__base__describable: ID
  "The description of an entity or a relation"
  description: String
}

"The entity is licensed."
interface BaseLicensedComponent {
  _c__base__licensed: ID
  "Title, author, source and license. Best practices for attribution: https://wiki.creativecommons.org/wiki/best_practices_for_attribution"
  attribution: String
  "The SPDX license identifier. See: https://spdx.org/licenses/"
  license: String
}

"The entity or relation has a name."
interface BaseNamedComponent {
  _c__base__named: ID
  "The name of an entity or a relation"
  name: String
}

"The relations between two entities are ordered using a ordinal number associated with sibling relations"
interface BaseOrderedComponent {
  _c__base__ordered: ID
  "The relation ordinal number associated with sibling relations"
  order: Float
}

"The entity is versioned."
interface BaseVersionedComponent {
  _c__base__versioned: ID
  "The version number. Use semantic versioning. See: https://semver.org/"
  version: String
}

interface BinaryBinaryDataComponent {
  _c__binary__binary_data: ID
  data_url: String
}

"Loads binary data"
interface BinaryLoadBinaryDataComponent {
  _c__binary__load_binary_data: ID
  data_url: String
}

"Saves binary data"
interface BinarySaveBinaryDataComponent {
  _c__binary__save_binary_data: ID
  data_url: String
}

interface ComparisonComparisonGateComponent {
  _c__comparison__comparison_gate: ID
  lhs: String
  result: Boolean
  rhs: String
}

"Loads a configuration file"
interface ConfigConfigFileComponent {
  _c__config__config_file: ID
  result: String
}

"A buffer of the given size"
interface ConnectorBufferComponent {
  _c__connector__buffer: ID
  "The buffer with up to buffer_size elements"
  buffer: [String]!
  "The number of elements of the buffer"
  buffer_size: Float
}

"Connects a property of an entity instance with a other property of another entity instance"
interface ConnectorConnectorComponent {
  _c__connector__connector: ID
  "The name of the inbound property"
  inbound_property_name: String
  "The name of the outbound property"
  outbound_property_name: String
}

"Counts the number of propagations"
interface ConnectorPropagationCounterComponent {
  _c__connector__propagation_counter: ID
  "The count of propagations"
  propagation_count: Float
}

"This components spawns events."
interface CoreEventComponent {
  _c__core__event: ID
  event: String
}

"The label is an hierarchical path with static segments, named parameters and catch-all parameters."
interface CoreLabeledComponent {
  _c__core__labeled: ID
  label: String
}

interface Entity {
  id: ID!
}

"Represents a file in the file system"
interface FileFileComponent {
  _c__file__file: ID
  "The filename"
  filename: String
}

"Triggers if the file with the given filename has been changed"
interface FileFsNotifyComponent {
  _c__file__fs_notify: ID
  "The filename"
  filename: String
  "Triggers if the file with the given filename has been changed"
  trigger: Boolean
}

"Sends HTTP request to a given URL"
interface HttpHttpComponent {
  _c__http__http: ID
  "The HTTP method"
  method: String
  payload: String
  request_headers: String
  response_headers: String
  result: String
  status: Float
  url: String
}

"Sends JSON-RPC request to a given URL"
interface HttpJsonRpcComponent {
  _c__http__json_rpc: ID
  error: String
  json_rpc_version: String
  method: String
  params: String
  result: String
  url: String
}

"Loads a JSON file"
interface JsonLoadJsonComponent {
  _c__json__load_json: ID
  result: String
}

"Saves an object as JSON file"
interface JsonSaveJsonComponent {
  _c__json__save_json: ID
  payload: String
}

"An action can be triggered"
interface LogicalActionComponent {
  _c__logical__action: ID
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Depending on the given condition outputs a result"
interface LogicalConditionComponent {
  _c__logical__condition: ID
  "A boolean condition"
  condition: Boolean
  "The result"
  result: String
}

"A generator sends a trigger"
interface LogicalGeneratorComponent {
  _c__logical__generator: ID
  "Sends a boolean trigger"
  trigger: Boolean
}

"Executes a logical operation on the inputs lhs and rhs and outputs the result"
interface LogicalLogicalGateComponent {
  _c__logical__logical_gate: ID
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

"Executes a logical operation on the input lhs and outputs the result"
interface LogicalLogicalOperationComponent {
  _c__logical__logical_operation: ID
  lhs: Boolean
  result: Boolean
}

interface MetadataDublinCoreComponent {
  _c__metadata__dublin_core: ID
  "An entity responsible for making contributions to the resource."
  dc_contributor: String
  "The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant"
  dc_coverage: String
  "An entity primarily responsible for making the resource"
  dc_creator: String
  "A point or period of time associated with an event in the lifecycle of the resource"
  dc_date: String
  "An account of the resource"
  dc_description: String
  "The file format, physical medium, or dimensions of the resource"
  dc_format: String
  "An unambiguous reference to the resource within a given context"
  dc_identifier: String
  "A language of the resource"
  dc_language: String
  "An entity responsible for making the resource available"
  dc_publisher: String
  "A related resource"
  dc_relation: String
  "Information about rights held in and over the resource"
  dc_rights: String
  "A related resource from which the described resource is derived"
  dc_source: String
  "The topic of the resource"
  dc_subject: String
  "A name given to the resource"
  dc_title: String
  "The nature or genre of the resource"
  dc_type: String
}

interface MetadataId3Component {
  _c__metadata__id3: ID
  id3_talb: String
}

interface NumericNumericGateComponent {
  _c__numeric__numeric_gate: ID
  lhs: Float
  result: Float
  rhs: Float
}

interface NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  lhs: Float
  result: Float
}

interface Relation {
  key: ID!
}

"State of type array"
interface StateStateArrayComponent {
  _c__state__state_array: ID
  set_state: [String]!
  state: [String]!
}

"State of type boolean"
interface StateStateBooleanComponent {
  _c__state__state_boolean: ID
  set_state: Boolean
  state: Boolean
}

interface StateStateDebuggerDebugComponent {
  _c__state__state_debugger_debug: ID
}

interface StateStateDebuggerTraceComponent {
  _c__state__state_debugger_trace: ID
}

"State of type number"
interface StateStateNumberComponent {
  _c__state__state_number: ID
  set_state: Float
  state: Float
}

"State of type object"
interface StateStateObjectComponent {
  _c__state__state_object: ID
  set_state: String
  state: String
}

"State of type string"
interface StateStateStringComponent {
  _c__state__state_string: ID
  set_state: String
  state: String
}

interface StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  lhs: String
  result: Boolean
}

interface StringStringComparisonComponent {
  _c__string__string_comparison: ID
  lhs: String
  result: Boolean
  rhs: String
}

interface StringStringGateComponent {
  _c__string__string_gate: ID
  lhs: String
  result: String
  rhs: String
}

interface StringStringNumberOperationComponent {
  _c__string__string_number_operation: ID
  lhs: String
  result: Float
}

interface StringStringOperationComponent {
  _c__string__string_operation: ID
  lhs: String
  result: String
}

interface StringStringStringNumberGateComponent {
  _c__string__string_string_number_gate: ID
  lhs: String
  result: Float
  rhs: String
}

interface TaxonomyWeightedComponent {
  _c__taxonomy__weighted: ID
  weight: Float
}

"Value of type array"
interface ValueValueArrayComponent {
  _c__value__value_array: ID
  value: [String]!
}

"Value of type boolean"
interface ValueValueBooleanComponent {
  _c__value__value_boolean: ID
  value: Boolean
}

interface ValueValueDebuggerDebugComponent {
  _c__value__value_debugger_debug: ID
}

interface ValueValueDebuggerTraceComponent {
  _c__value__value_debugger_trace: ID
}

"Value of type number"
interface ValueValueNumberComponent {
  _c__value__value_number: ID
  value: Float
}

"Value of type object"
interface ValueValueObjectComponent {
  _c__value__value_object: ID
  value: String
}

"Value of type string"
interface ValueValueStringComponent {
  _c__value__value_string: ID
  value: String
}

union AllEntities = ArithmeticF64AddEntity | ArithmeticF64DecrementEntity | ArithmeticF64DivEntity | ArithmeticF64IncrementEntity | ArithmeticF64MaxEntity | ArithmeticF64MinEntity | ArithmeticF64ModEntity | ArithmeticF64MulEntity | ArithmeticF64SubEntity | ArithmeticI64AddEntity | ArithmeticI64DecrementEntity | ArithmeticI64DivEntity | ArithmeticI64IncrementEntity | ArithmeticI64MaxEntity | ArithmeticI64MinEntity | ArithmeticI64ModEntity | ArithmeticI64MulEntity | ArithmeticI64SubEntity | ArithmeticU64AddEntity | ArithmeticU64CounterEntity | ArithmeticU64DecrementEntity | ArithmeticU64DivEntity | ArithmeticU64IncrementEntity | ArithmeticU64MaxEntity | ArithmeticU64MinEntity | ArithmeticU64ModEntity | ArithmeticU64MulEntity | ArithmeticU64SubEntity | BaseCommentEntity | BinaryLoadBinaryDataEntity | BinarySaveBinaryDataEntity | ComparisonEqualsEntity | ComparisonGreaterThanEntity | ComparisonGreaterThanOrEqualsEntity | ComparisonLowerThanEntity | ComparisonLowerThanOrEqualsEntity | ComparisonNotEqualsEntity | ConfigConfigFileEntity | CoreShutdownEntity | CoreSystemEventEntity | FlowGenericFlowEntity | HttpHttpEntity | HttpJsonRpcEntity | JsonArrayContainsEntity | JsonArrayGetByIndexEntity | JsonArrayLengthEntity | JsonArrayPopEntity | JsonArrayPushEntity | JsonArrayReverseEntity | JsonLoadJsonEntity | JsonObjectGetPropertyEntity | JsonObjectKeysEntity | JsonObjectRemovePropertyEntity | JsonObjectSetPropertyEntity | JsonSaveJsonEntity | LogicalAnd3Entity | LogicalAndEntity | LogicalIfThenElseEntity | LogicalNandEntity | LogicalNorEntity | LogicalNotEntity | LogicalOrEntity | LogicalToggleEntity | LogicalTriggerEntity | LogicalXnorEntity | LogicalXorEntity | NumericF64AbsEntity | NumericF64AcosEntity | NumericF64AcoshEntity | NumericF64AsinEntity | NumericF64AsinhEntity | NumericF64Atan2Entity | NumericF64AtanEntity | NumericF64AtanhEntity | NumericF64CbrtEntity | NumericF64CeilEntity | NumericF64CosEntity | NumericF64CoshEntity | NumericF64Exp2Entity | NumericF64ExpEntity | NumericF64FloorEntity | NumericF64FractEntity | NumericF64HypotEntity | NumericF64LnEntity | NumericF64Log10Entity | NumericF64Log2Entity | NumericF64LogEntity | NumericF64PowEntity | NumericF64RecipEntity | NumericF64RoundEntity | NumericF64SignumEntity | NumericF64SinEntity | NumericF64SinhEntity | NumericF64SqrtEntity | NumericF64TanEntity | NumericF64TanhEntity | NumericF64ToDegreesEntity | NumericF64ToRadiansEntity | NumericF64TruncEntity | NumericI64AbsEntity | NumericI64SignumEntity | RandomRandomBoolEntity | RandomRandomF64Entity | RandomRandomF64PseudoEntity | RandomRandomF64RangeEntity | RandomRandomI64Entity | RandomRandomI64PseudoEntity | RandomRandomI64RangeEntity | RandomRandomStringEntity | RandomRandomU64Entity | RandomRandomU64PseudoEntity | RandomRandomU64RangeEntity | RandomRandomUuidEntity | StateStateArrayEntity | StateStateBooleanEntity | StateStateNumberEntity | StateStateObjectEntity | StateStateStringEntity | StringCamelCaseEntity | StringCapitalizeEntity | StringCharCountEntity | StringCharCountGraphemesEntity | StringChopAfterEntity | StringChopAfterLastEntity | StringChopBeforeEntity | StringChopBeforeLastEntity | StringChopRemovePrefixEntity | StringChopRemoveSuffixEntity | StringConcatEntity | StringContainsEntity | StringCountSubstringsEntity | StringCountUniqueWordsEntity | StringCountWordsEntity | StringDecapitalizeEntity | StringEndsWithEntity | StringEscapeHtmlEntity | StringEscapeRegexpEntity | StringIsAlphaDigitEntity | StringIsAlphaEntity | StringIsBlankEntity | StringIsCamelCaseEntity | StringIsCapitalizeEntity | StringIsDecapitalizeEntity | StringIsDigitEntity | StringIsEmptyEntity | StringIsKebabCaseEntity | StringIsLowerFirstEntity | StringIsLowercaseEntity | StringIsNumericEntity | StringIsPascalCaseEntity | StringIsShoutyKebabCaseEntity | StringIsShoutySnakeCaseEntity | StringIsSnakeCaseEntity | StringIsTitleCaseEntity | StringIsTrainCaseEntity | StringIsUpperFirstEntity | StringIsUppercaseEntity | StringKebabCaseEntity | StringLowerFirstEntity | StringLowercaseEntity | StringPascalCaseEntity | StringReverseEntity | StringShoutyKebabCaseEntity | StringShoutySnakeCaseEntity | StringSnakeCaseEntity | StringStartsWithEntity | StringStringLengthEntity | StringStripHtmlTagsEntity | StringSwapCaseEntity | StringTemplatingEntity | StringTitleCaseEntity | StringTrainCaseEntity | StringTrimEndEntity | StringTrimEntity | StringTrimStartEntity | StringUnescapeHtmlEntity | StringUpperFirstEntity | StringUppercaseEntity | SystemSystemEnvEntity | TaxonomyCategoryEntity | TaxonomyTagEntity | ValueValueArrayEntity | ValueValueBooleanEntity | ValueValueNumberEntity | ValueValueObjectEntity | ValueValueStringEntity

"Adds two floating point numbers"
type ArithmeticF64AddEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Decrements a number"
type ArithmeticF64DecrementEntity implements ArithmeticArithmeticOperationComponent & Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Divides two floating point numbers"
type ArithmeticF64DivEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Increments a number"
type ArithmeticF64IncrementEntity implements ArithmeticArithmeticOperationComponent & Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the maximum value of two inputs"
type ArithmeticF64MaxEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Returns the minimum value of two inputs"
type ArithmeticF64MinEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Modulo"
type ArithmeticF64ModEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Multiply two floating point numbers"
type ArithmeticF64MulEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Subtract an floating point number from another floating point number"
type ArithmeticF64SubEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Adds two signed integer numbers"
type ArithmeticI64AddEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Decrements a signed integer number"
type ArithmeticI64DecrementEntity implements ArithmeticArithmeticOperationComponent & Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Divides two signed integer numbers"
type ArithmeticI64DivEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Increments a signed integer number"
type ArithmeticI64IncrementEntity implements ArithmeticArithmeticOperationComponent & Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the maximum value of two signed integer numbers"
type ArithmeticI64MaxEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Returns the minimum value of two signed integer numbers"
type ArithmeticI64MinEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Modulo"
type ArithmeticI64ModEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Multiply two signed integer numbers"
type ArithmeticI64MulEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Subtract an signed integer number from another signed integer number"
type ArithmeticI64SubEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Adds two unsigned integer numbers"
type ArithmeticU64AddEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"If triggered the counter will be increased"
type ArithmeticU64CounterEntity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Decrements a unsigned integer number"
type ArithmeticU64DecrementEntity implements ArithmeticArithmeticOperationComponent & Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Divides two unsigned integer numbers"
type ArithmeticU64DivEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Increments a unsigned integer number"
type ArithmeticU64IncrementEntity implements ArithmeticArithmeticOperationComponent & Entity {
  _c__arithmetic__arithmetic_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the maximum value of two unsigned integer numbers"
type ArithmeticU64MaxEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Returns the minimum value of two unsigned integer numbers"
type ArithmeticU64MinEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Modulo"
type ArithmeticU64ModEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Multiply two unsigned integer numbers"
type ArithmeticU64MulEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Subtract an unsigned integer number from another unsigned integer number"
type ArithmeticU64SubEntity implements ArithmeticArithmeticGateComponent & Entity {
  _c__arithmetic__arithmetic_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"A simple comment"
type BaseCommentEntity implements BaseDescribableComponent & BaseNamedComponent & Entity {
  _c__base__describable: ID
  _c__base__named: ID
  "The description of an entity or a relation"
  description: String
  id: ID!
  "The name of an entity or a relation"
  name: String
}

"Loads binary data"
type BinaryLoadBinaryDataEntity implements BaseNamedComponent & BinaryBinaryDataComponent & BinaryLoadBinaryDataComponent & Entity & FileFileComponent & LogicalActionComponent {
  _c__base__named: ID
  _c__binary__binary_data: ID
  _c__binary__load_binary_data: ID
  _c__file__file: ID
  _c__logical__action: ID
  data_url: String
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Saves binary data"
type BinarySaveBinaryDataEntity implements BaseNamedComponent & BinaryBinaryDataComponent & BinarySaveBinaryDataComponent & Entity & FileFileComponent & LogicalActionComponent {
  _c__base__named: ID
  _c__binary__binary_data: ID
  _c__binary__save_binary_data: ID
  _c__file__file: ID
  _c__logical__action: ID
  data_url: String
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Checks if lhs is equal to rhs"
type ComparisonEqualsEntity implements ComparisonComparisonGateComponent & Entity {
  _c__comparison__comparison_gate: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

"Checks if lhs is greater than rhs"
type ComparisonGreaterThanEntity implements Entity {
  _c__comparison__comparison_gate: ID
  id: ID!
  lhs: Float
  result: Boolean
  rhs: Float
}

"Checks if lhs is greater than or equal to rhs"
type ComparisonGreaterThanOrEqualsEntity implements Entity {
  _c__comparison__comparison_gate: ID
  id: ID!
  lhs: Float
  result: Boolean
  rhs: Float
}

"Checks if lhs is lower than rhs"
type ComparisonLowerThanEntity implements Entity {
  _c__comparison__comparison_gate: ID
  id: ID!
  lhs: Float
  result: Boolean
  rhs: Float
}

"Checks if lhs is lower than or equal to rhs"
type ComparisonLowerThanOrEqualsEntity implements Entity {
  _c__comparison__comparison_gate: ID
  id: ID!
  lhs: Float
  result: Boolean
  rhs: Float
}

"Checks if lhs not equal to rhs"
type ComparisonNotEqualsEntity implements ComparisonComparisonGateComponent & Entity {
  _c__comparison__comparison_gate: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

"Loads a configuration file"
type ConfigConfigFileEntity implements BaseNamedComponent & Entity & FileFileComponent & LogicalActionComponent {
  _c__base__named: ID
  _c__config__config_file: ID
  _c__file__file: ID
  _c__logical__action: ID
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Connects a property with a other property and buffers the values in a FIFO buffer before propagation"
type ConnectorBufferedFifoConnectorRelation implements ConnectorBufferComponent & ConnectorConnectorComponent & Relation {
  _c__connector__buffer: ID
  _c__connector__connector: ID
  "The buffer with up to buffer_size elements"
  buffer: [String]!
  "The number of elements of the buffer"
  buffer_size: Float
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a property with a other property and propagates the value if and only if the value is different"
type ConnectorDebounceConnectorRelation implements ConnectorConnectorComponent & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a property with a other property and logs changes to the debug logger"
type ConnectorDebugConnectorRelation implements ConnectorConnectorComponent & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a outbound property with another property. The value of the outbound property will be subtracted from the value of the inbound property."
type ConnectorDecrementByConnectorRelation implements ConnectorConnectorComponent & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a property of an entity instance with a other property of another entity instance"
type ConnectorDefaultConnectorRelation implements ConnectorConnectorComponent & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a property with a other property after the given milli seconds"
type ConnectorDelayConnectorRelation implements ConnectorConnectorComponent & Relation {
  _c__connector__connector: ID
  "The delay in milli seconds"
  delay: Float
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a outbound property with another property. The value of the outbound property will be added to the value of the inbound property."
type ConnectorIncrementByConnectorRelation implements ConnectorConnectorComponent & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a property with a other property and interpolate the numeric values before propagation"
type ConnectorNumericInterpolationConnectorRelation implements ConnectorBufferComponent & ConnectorConnectorComponent & Relation {
  _c__connector__buffer: ID
  _c__connector__connector: ID
  "The buffer with up to buffer_size elements"
  buffer: [String]!
  "The number of elements of the buffer"
  buffer_size: Float
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects an string property of an entity instance with a number property of another entity instance. Outgoing string point values gets converted to floating point numbers if possible"
type ConnectorParseFloatConnectorRelation implements ConnectorConnectorComponent & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects an string property of an entity instance with a number property of another entity instance. Outgoing string values gets converted to integer numbers if possible"
type ConnectorParseIntConnectorRelation implements ConnectorConnectorComponent & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a property with a other property. The propagation will run in a new thread"
type ConnectorThreadedConnectorRelation implements ConnectorConnectorComponent & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects an number property of an entity instance with a string property of another entity instance. Outgoing integer values gets converted to string"
type ConnectorToStringConnectorRelation implements ConnectorConnectorComponent & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

"Connects a property with a other property and logs changes to the trace logger"
type ConnectorTraceConnectorRelation implements ConnectorConnectorComponent & Relation {
  _c__connector__connector: ID
  inbound: AllEntities!
  "The name of the inbound property"
  inbound_property_name: String
  key: ID!
  outbound: AllEntities!
  "The name of the outbound property"
  outbound_property_name: String
}

type CoreShutdownEntity implements CoreLabeledComponent & Entity & LogicalActionComponent {
  _c__core__labeled: ID
  _c__logical__action: ID
  id: ID!
  label: String
  "The result"
  result: String
  shutdown: Boolean
  trigger: Boolean
}

"Events of the type system"
type CoreSystemEventEntity implements CoreEventComponent & CoreLabeledComponent & Entity {
  _c__core__event: ID
  _c__core__labeled: ID
  event: String
  id: ID!
  label: String
}

"Generic flow without inputs and outputs"
type FlowGenericFlowEntity implements CoreLabeledComponent & Entity {
  _c__core__labeled: ID
  id: ID!
  label: String
}

"Sends HTTP request to a given URL"
type HttpHttpEntity implements Entity & HttpHttpComponent {
  _c__http__http: ID
  _c__logical__action: ID
  id: ID!
  "The HTTP method"
  method: String
  payload: String
  request_headers: String
  response_headers: String
  result: String
  status: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
  url: String
}

"Sends JSON-RPC request to a given URL"
type HttpJsonRpcEntity implements Entity & LogicalActionComponent {
  _c__http__json_rpc: ID
  _c__logical__action: ID
  error: String
  id: ID!
  json_rpc_version: String
  method: String
  params: String
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
  url: String
}

"Array Contains"
type JsonArrayContainsEntity implements BaseNamedComponent & Entity {
  _c__base__named: ID
  array: [String]!
  id: ID!
  "The name of an entity or a relation"
  name: String
  result: Boolean
  search: String
}

"Array Get By Index"
type JsonArrayGetByIndexEntity implements BaseNamedComponent & Entity {
  _c__base__named: ID
  array: [String]!
  id: ID!
  index: Float
  "The name of an entity or a relation"
  name: String
  result: String
}

"Array Length"
type JsonArrayLengthEntity implements BaseNamedComponent & Entity {
  _c__base__named: ID
  array: [String]!
  id: ID!
  length: Float
  "The name of an entity or a relation"
  name: String
}

"Array Pop"
type JsonArrayPopEntity implements BaseNamedComponent & Entity {
  _c__base__named: ID
  array: [String]!
  id: ID!
  "The name of an entity or a relation"
  name: String
  result: [String]!
  value: String
}

"Array Push"
type JsonArrayPushEntity implements BaseNamedComponent & Entity {
  _c__base__named: ID
  array: [String]!
  id: ID!
  "The name of an entity or a relation"
  name: String
  result: [String]!
  value: String
}

"Array Reverse"
type JsonArrayReverseEntity implements BaseNamedComponent & Entity {
  _c__base__named: ID
  array: [String]!
  id: ID!
  "The name of an entity or a relation"
  name: String
  result: [String]!
}

"Loads a JSON file"
type JsonLoadJsonEntity implements BaseNamedComponent & Entity & FileFileComponent & LogicalActionComponent {
  _c__base__named: ID
  _c__file__file: ID
  _c__json__load_json: ID
  _c__logical__action: ID
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Object Get Property"
type JsonObjectGetPropertyEntity implements BaseNamedComponent & Entity {
  _c__base__named: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  object: String
  property_name: String
  result: String
}

"Object Keys"
type JsonObjectKeysEntity implements BaseNamedComponent & Entity {
  _c__base__named: ID
  id: ID!
  keys: [String]!
  "The name of an entity or a relation"
  name: String
  object: String
}

"Object Remove Property"
type JsonObjectRemovePropertyEntity implements BaseNamedComponent & Entity {
  _c__base__named: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  object: String
  property_name: String
  result: String
}

"Object Set Property"
type JsonObjectSetPropertyEntity implements BaseNamedComponent & Entity {
  _c__base__named: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  object: String
  property_name: String
  result: String
  value: String
}

"Saves an object as JSON file"
type JsonSaveJsonEntity implements BaseNamedComponent & Entity & FileFileComponent & JsonSaveJsonComponent & LogicalActionComponent {
  _c__base__named: ID
  _c__file__file: ID
  _c__json__save_json: ID
  _c__logical__action: ID
  "The filename"
  filename: String
  id: ID!
  "The name of an entity or a relation"
  name: String
  payload: String
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"An AND Gate with three inputs"
type LogicalAnd3Entity implements Entity {
  id: ID!
  input1: Boolean
  input2: Boolean
  input3: Boolean
  result: Boolean
}

"AND"
type LogicalAndEntity implements Entity & LogicalLogicalGateComponent {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

"Each time it's triggered, either the then-payload or the else-payload gets propagated"
type LogicalIfThenElseEntity implements Entity & LogicalConditionComponent {
  _c__logical__condition: ID
  "A boolean condition"
  condition: Boolean
  "If the condition is false, the else_payload gets propagated"
  else_payload: String
  id: ID!
  "The result"
  result: String
  "If the condition is true, the then_payload gets propagated"
  then_payload: String
}

"NAND"
type LogicalNandEntity implements Entity & LogicalLogicalGateComponent {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

"NOR"
type LogicalNorEntity implements Entity & LogicalLogicalGateComponent {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

"NOT"
type LogicalNotEntity implements Entity & LogicalLogicalOperationComponent {
  _c__logical__logical_operation: ID
  id: ID!
  lhs: Boolean
  result: Boolean
}

"OR"
type LogicalOrEntity implements Entity & LogicalLogicalGateComponent {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

"If triggered the state will toggled"
type LogicalToggleEntity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Boolean
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"If triggered the payload will be copied to the output"
type LogicalTriggerEntity implements Entity & LogicalActionComponent {
  _c__logical__action: ID
  id: ID!
  payload: String
  "The result"
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"XNOR"
type LogicalXnorEntity implements Entity & LogicalLogicalGateComponent {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

"XOR"
type LogicalXorEntity implements Entity & LogicalLogicalGateComponent {
  _c__logical__logical_gate: ID
  id: ID!
  lhs: Boolean
  result: Boolean
  rhs: Boolean
}

"Computes the absolute value"
type NumericF64AbsEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Computes the arccosine of a number"
type NumericF64AcosEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Inverse hyperbolic cosine function"
type NumericF64AcoshEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Computes the arcsine of a number"
type NumericF64AsinEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Inverse hyperbolic sine function"
type NumericF64AsinhEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Computes the four quadrant arctangent in radians"
type NumericF64Atan2Entity implements Entity & NumericNumericGateComponent {
  _c__numeric__numeric_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Computes the arctangent of a number"
type NumericF64AtanEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Inverse hyperbolic tangent function"
type NumericF64AtanhEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the cube root of a number"
type NumericF64CbrtEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the smallest integer greater than or equal to a number"
type NumericF64CeilEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Computes the cosine of a number (in radians)"
type NumericF64CosEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Hyperbolic cosine function"
type NumericF64CoshEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns 2^(input)"
type NumericF64Exp2Entity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns e^(input), (the exponential function)"
type NumericF64ExpEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the largest integer less than or equal to a number"
type NumericF64FloorEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the fractional part of a number"
type NumericF64FractEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Calculates the length of the hypotenuse of a right-angle triangle given legs of length x and y"
type NumericF64HypotEntity implements Entity & NumericNumericGateComponent {
  _c__numeric__numeric_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Returns the natural logarithm of the number"
type NumericF64LnEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the base 10 logarithm of the number"
type NumericF64Log10Entity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the base 2 logarithm of the number"
type NumericF64Log2Entity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the logarithm of the number with respect to an arbitrary base"
type NumericF64LogEntity implements Entity & NumericNumericGateComponent {
  _c__numeric__numeric_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Raises a number to a power"
type NumericF64PowEntity implements Entity & NumericNumericGateComponent {
  _c__numeric__numeric_gate: ID
  id: ID!
  lhs: Float
  result: Float
  rhs: Float
}

"Takes the reciprocal (inverse) of a number, 1/x"
type NumericF64RecipEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the nearest integer to a number. Round half-way cases away from 0.0"
type NumericF64RoundEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns a number that represents the sign of the input"
type NumericF64SignumEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Computes the sine of a number (in radians)"
type NumericF64SinEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Hyperbolic sine function"
type NumericF64SinhEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the square root of a number"
type NumericF64SqrtEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Computes the tangent of a number (in radians)"
type NumericF64TanEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Hyperbolic tangent function"
type NumericF64TanhEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Converts radians to degrees"
type NumericF64ToDegreesEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Converts degrees to radians"
type NumericF64ToRadiansEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns the integer part of a number"
type NumericF64TruncEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Computes the absolute value"
type NumericI64AbsEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

"Returns a number that represents the sign of the input"
type NumericI64SignumEntity implements Entity & NumericNumericOperationComponent {
  _c__numeric__numeric_operation: ID
  id: ID!
  lhs: Float
  result: Float
}

type Query {
  arithmetic: arithmetic!
  arithmetic_f64: arithmetic_f64!
  arithmetic_i64: arithmetic_i64!
  arithmetic_u64: arithmetic_u64!
  base: base!
  binary: binary!
  comparison: comparison!
  config: config!
  connector: connector!
  core: core!
  file: file!
  flow: flow!
  http: http!
  json: json!
  logical: logical!
  metadata: metadata!
  numeric: numeric!
  numeric_f64: numeric_f64!
  numeric_i64: numeric_i64!
  random: random!
  state: state!
  string: string!
  system: system!
  taxonomy: taxonomy!
  value: value!
}

"Random Bool"
type RandomRandomBoolEntity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Boolean
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random Floating Point Number"
type RandomRandomF64Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Pseudo Random Floating Point Number"
type RandomRandomF64PseudoEntity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Float
  seed: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random Floating Point Number Within Range"
type RandomRandomF64RangeEntity implements Entity {
  _c__logical__action: ID
  high: Float
  id: ID!
  low: Float
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random Signed Integer Number"
type RandomRandomI64Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Pseudo Random Signed Integer Number"
type RandomRandomI64PseudoEntity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Float
  seed: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random Signed Integer Within Range"
type RandomRandomI64RangeEntity implements Entity {
  _c__logical__action: ID
  high: Float
  id: ID!
  low: Float
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random String"
type RandomRandomStringEntity implements Entity {
  _c__logical__action: ID
  id: ID!
  length: Float
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random Unsigned Integer Number"
type RandomRandomU64Entity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Pseudo Random Unsigned Integer Number"
type RandomRandomU64PseudoEntity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: Float
  seed: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random Unsigned Integer Within Range"
type RandomRandomU64RangeEntity implements Entity {
  _c__logical__action: ID
  high: Float
  id: ID!
  low: Float
  result: Float
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"Random UUID"
type RandomRandomUuidEntity implements Entity {
  _c__logical__action: ID
  id: ID!
  result: String
  "On receiving a boolean trigger the action will be executed"
  trigger: Boolean
}

"State of type array"
type StateStateArrayEntity implements BaseNamedComponent & Entity & StateStateArrayComponent & ValueValueArrayComponent {
  _c__base__named: ID
  _c__state__state_array: ID
  _c__value__value_array: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: [String]!
  state: [String]!
  value: [String]!
}

"State of type boolean"
type StateStateBooleanEntity implements BaseNamedComponent & Entity & StateStateBooleanComponent & ValueValueBooleanComponent {
  _c__base__named: ID
  _c__state__state_boolean: ID
  _c__value__value_boolean: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: Boolean
  state: Boolean
  value: Boolean
}

"State of type number"
type StateStateNumberEntity implements BaseNamedComponent & Entity & StateStateNumberComponent & ValueValueNumberComponent {
  _c__base__named: ID
  _c__state__state_number: ID
  _c__value__value_number: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: Float
  state: Float
  value: Float
}

"State of type object"
type StateStateObjectEntity implements BaseNamedComponent & Entity & StateStateObjectComponent & ValueValueObjectComponent {
  _c__base__named: ID
  _c__state__state_object: ID
  _c__value__value_object: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: String
  state: String
  value: String
}

"State of type string"
type StateStateStringEntity implements BaseNamedComponent & Entity & StateStateStringComponent & ValueValueStringComponent {
  _c__base__named: ID
  _c__state__state_string: ID
  _c__value__value_string: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  set_state: String
  state: String
  value: String
}

"Converts the input to camel case"
type StringCamelCaseEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the first character of the input to upper case and convert the rest of the input to lower case"
type StringCapitalizeEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Counts the characters"
type StringCharCountEntity implements Entity & StringStringNumberOperationComponent {
  _c__string__string_number_operation: ID
  id: ID!
  lhs: String
  result: Float
}

"Counts the graphemes in the input string taking care of surrogate pairs and combining marks"
type StringCharCountGraphemesEntity implements Entity & StringStringNumberOperationComponent {
  _c__string__string_number_operation: ID
  id: ID!
  lhs: String
  result: Float
}

"Returns everything after the given search"
type StringChopAfterEntity implements Entity & StringStringGateComponent {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Returns everything after the last given search"
type StringChopAfterLastEntity implements Entity & StringStringGateComponent {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Returns everything before the given search"
type StringChopBeforeEntity implements Entity & StringStringGateComponent {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Returns everything before the last given search"
type StringChopBeforeLastEntity implements Entity & StringStringGateComponent {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Extracts the prefix from the input"
type StringChopRemovePrefixEntity implements Entity & StringStringGateComponent {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Extracts the suffix from the input"
type StringChopRemoveSuffixEntity implements Entity & StringStringGateComponent {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Concat"
type StringConcatEntity implements Entity & StringStringGateComponent {
  _c__string__string_gate: ID
  id: ID!
  lhs: String
  result: String
  rhs: String
}

"Contains"
type StringContainsEntity implements Entity & StringStringComparisonComponent {
  _c__string__string_comparison: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

"Counts the number of substring appearances in the input string"
type StringCountSubstringsEntity implements Entity & StringStringStringNumberGateComponent {
  _c__string__string_string_number_gate: ID
  id: ID!
  lhs: String
  result: Float
  rhs: String
}

"Counting occurrences of unique words in the input string. This function respects unicode"
type StringCountUniqueWordsEntity implements Entity & StringStringStringNumberGateComponent {
  _c__string__string_string_number_gate: ID
  id: ID!
  lhs: String
  result: Float
  rhs: String
}

"Counts the number of words in the input string"
type StringCountWordsEntity implements Entity & StringStringStringNumberGateComponent {
  _c__string__string_string_number_gate: ID
  id: ID!
  lhs: String
  result: Float
  rhs: String
}

"Converts the first character of the input to lower case and convert the rest of the input to lower case"
type StringDecapitalizeEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Ends With"
type StringEndsWithEntity implements Entity & StringStringComparisonComponent {
  _c__string__string_comparison: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

"Escapes HTML special characters"
type StringEscapeHtmlEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Escapes the regular expression special characters"
type StringEscapeRegexpEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Checks whether the input string contains contains only alpha and digit characters"
type StringIsAlphaDigitEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string contains only alpha characters"
type StringIsAlphaEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is empty or contains only whitespaces"
type StringIsBlankEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is camelCased"
type StringIsCamelCaseEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is capitalized and the rest of the input string is lower case"
type StringIsCapitalizeEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is decapitalized and the rest of the input string is converted to lower case"
type StringIsDecapitalizeEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string contains only digit characters"
type StringIsDigitEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is empty"
type StringIsEmptyEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is kebab-cased"
type StringIsKebabCaseEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string has the first character in lower case"
type StringIsLowerFirstEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string has only lower case characters"
type StringIsLowercaseEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is numeric"
type StringIsNumericEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is PascalCased"
type StringIsPascalCaseEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is SHOUTY-KEBAB-CASED"
type StringIsShoutyKebabCaseEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is SHOUTY_SNAKE_CASED"
type StringIsShoutySnakeCaseEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is snake_cased"
type StringIsSnakeCaseEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is a titlecased string and there is at least one character"
type StringIsTitleCaseEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string is Train-Cased"
type StringIsTrainCaseEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string has the first character in upper case"
type StringIsUpperFirstEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Checks whether the input string has only upper case characters"
type StringIsUppercaseEntity implements Entity & StringStringBoolOperationComponent {
  _c__string__string_bool_operation: ID
  id: ID!
  lhs: String
  result: Boolean
}

"Converts the input to kebab case"
type StringKebabCaseEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the first character of the input to lower case"
type StringLowerFirstEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Lowercase"
type StringLowercaseEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the input to pascal case"
type StringPascalCaseEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Reverses the given string"
type StringReverseEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the input to SHOUTY kebab case"
type StringShoutyKebabCaseEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the title to SHOUTY snake case"
type StringShoutySnakeCaseEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the subject to snake case"
type StringSnakeCaseEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Starts With"
type StringStartsWithEntity implements Entity & StringStringComparisonComponent {
  _c__string__string_comparison: ID
  id: ID!
  lhs: String
  result: Boolean
  rhs: String
}

"Returns the length of the input string"
type StringStringLengthEntity implements Entity & StringStringNumberOperationComponent {
  _c__string__string_number_operation: ID
  id: ID!
  lhs: String
  result: Float
}

"Strips all HTML tags"
type StringStripHtmlTagsEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the uppercase alpha characters of the input to lowercase and lowercase characters to uppercase"
type StringSwapCaseEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Renders a template"
type StringTemplatingEntity implements Entity {
  context: String
  id: ID!
  result: String
  template: String
}

"Converts the input to title case"
type StringTitleCaseEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the input to train case"
type StringTrainCaseEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Trim  End"
type StringTrimEndEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Trim"
type StringTrimEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Trim  Start"
type StringTrimStartEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Unescapes HTML special characters"
type StringUnescapeHtmlEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Converts the first character of the title to upper case"
type StringUpperFirstEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"Uppercase"
type StringUppercaseEntity implements Entity & StringStringOperationComponent {
  _c__string__string_operation: ID
  id: ID!
  lhs: String
  result: String
}

"System Environment Variable"
type SystemSystemEnvEntity implements BaseNamedComponent & CoreLabeledComponent & Entity & ValueValueStringComponent {
  _c__base__named: ID
  _c__core__labeled: ID
  _c__value__value_string: ID
  id: ID!
  label: String
  "The name of an entity or a relation"
  name: String
  value: String
}

"The outbound entity is categorized as the inbound category"
type TaxonomyCategorizedAsRelation implements Relation & TaxonomyWeightedComponent {
  _c__taxonomy__weighted: ID
  inbound_taxonomy_category: TaxonomyCategoryEntity!
  key: ID!
  outbound: AllEntities!
  weight: Float
}

"A category is a fundamental and distinct class to which entities or concepts belong"
type TaxonomyCategoryEntity implements BaseDescribableComponent & BaseNamedComponent & Entity {
  _c__base__describable: ID
  _c__base__named: ID
  "The description of an entity or a relation"
  description: String
  id: ID!
  "The outbound entity is categorized as the inbound category"
  inbound_taxonomy_categorized_as: [TaxonomyCategorizedAsRelation!]!
  "The outbound category has the inbound entity as sub category"
  inbound_taxonomy_has_subcategory: [TaxonomyHasSubcategoryRelation!]!
  "The name of an entity or a relation"
  name: String
  "The outbound category has the inbound entity as sub category"
  outbound_taxonomy_has_subcategory: [TaxonomyHasSubcategoryRelation!]!
}

"The outbound category has the inbound entity as sub category"
type TaxonomyHasSubcategoryRelation implements Relation & TaxonomyWeightedComponent {
  _c__taxonomy__weighted: ID
  inbound_taxonomy_category: TaxonomyCategoryEntity!
  key: ID!
  outbound_taxonomy_category: TaxonomyCategoryEntity!
  weight: Float
}

"A tag is a piece of information that describes the data or content that it is assigned to. Tags are nonhierarchical keywords used for Internet bookmarks, digital images, videos, files and so on. A tag doesn't carry any information or semantics itself."
type TaxonomyTagEntity implements BaseNamedComponent & CoreLabeledComponent & Entity {
  _c__base__named: ID
  _c__core__labeled: ID
  id: ID!
  "The outbound entity is tagged with the inbound tag"
  inbound_taxonomy_tagged_with: [TaxonomyTaggedWithRelation!]!
  label: String
  "The name of an entity or a relation"
  name: String
}

"The outbound entity is tagged with the inbound tag"
type TaxonomyTaggedWithRelation implements CoreLabeledComponent & Relation & TaxonomyWeightedComponent {
  _c__core__labeled: ID
  _c__taxonomy__weighted: ID
  inbound_taxonomy_tag: TaxonomyTagEntity!
  key: ID!
  label: String
  outbound: AllEntities!
  weight: Float
}

"Value of type array"
type ValueValueArrayEntity implements BaseNamedComponent & Entity & ValueValueArrayComponent {
  _c__base__named: ID
  _c__value__value_array: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: [String]!
}

"Value of type boolean"
type ValueValueBooleanEntity implements BaseNamedComponent & Entity & ValueValueBooleanComponent {
  _c__base__named: ID
  _c__value__value_boolean: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: Boolean
}

"Value of type number"
type ValueValueNumberEntity implements BaseNamedComponent & Entity & ValueValueNumberComponent {
  _c__base__named: ID
  _c__value__value_number: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: Float
}

"Value of type object"
type ValueValueObjectEntity implements BaseNamedComponent & Entity & ValueValueObjectComponent {
  _c__base__named: ID
  _c__value__value_object: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: String
}

"Value of type string"
type ValueValueStringEntity implements BaseNamedComponent & Entity & ValueValueStringComponent {
  _c__base__named: ID
  _c__value__value_string: ID
  id: ID!
  "The name of an entity or a relation"
  name: String
  value: String
}

type arithmetic {
  ArithmeticGateComponent: [ArithmeticArithmeticGateComponent!]!
  ArithmeticOperationComponent: [ArithmeticArithmeticOperationComponent!]!
}

type arithmetic_f64 {
  Add: [ArithmeticF64AddEntity!]!
  Decrement: [ArithmeticF64DecrementEntity!]!
  Div: [ArithmeticF64DivEntity!]!
  Increment: [ArithmeticF64IncrementEntity!]!
  Max: [ArithmeticF64MaxEntity!]!
  Min: [ArithmeticF64MinEntity!]!
  Mod: [ArithmeticF64ModEntity!]!
  Mul: [ArithmeticF64MulEntity!]!
  Sub: [ArithmeticF64SubEntity!]!
}

type arithmetic_i64 {
  Add: [ArithmeticI64AddEntity!]!
  Decrement: [ArithmeticI64DecrementEntity!]!
  Div: [ArithmeticI64DivEntity!]!
  Increment: [ArithmeticI64IncrementEntity!]!
  Max: [ArithmeticI64MaxEntity!]!
  Min: [ArithmeticI64MinEntity!]!
  Mod: [ArithmeticI64ModEntity!]!
  Mul: [ArithmeticI64MulEntity!]!
  Sub: [ArithmeticI64SubEntity!]!
}

type arithmetic_u64 {
  Add: [ArithmeticU64AddEntity!]!
  Counter: [ArithmeticU64CounterEntity!]!
  Decrement: [ArithmeticU64DecrementEntity!]!
  Div: [ArithmeticU64DivEntity!]!
  Increment: [ArithmeticU64IncrementEntity!]!
  Max: [ArithmeticU64MaxEntity!]!
  Min: [ArithmeticU64MinEntity!]!
  Mod: [ArithmeticU64ModEntity!]!
  Mul: [ArithmeticU64MulEntity!]!
  Sub: [ArithmeticU64SubEntity!]!
}

type base {
  Comment: [BaseCommentEntity!]!
  DescribableComponent: [BaseDescribableComponent!]!
  LicensedComponent: [BaseLicensedComponent!]!
  NamedComponent: [BaseNamedComponent!]!
  OrderedComponent: [BaseOrderedComponent!]!
  VersionedComponent: [BaseVersionedComponent!]!
}

type binary {
  BinaryDataComponent: [BinaryBinaryDataComponent!]!
  LoadBinaryData: [BinaryLoadBinaryDataEntity!]!
  LoadBinaryDataComponent: [BinaryLoadBinaryDataComponent!]!
  SaveBinaryData: [BinarySaveBinaryDataEntity!]!
  SaveBinaryDataComponent: [BinarySaveBinaryDataComponent!]!
}

type comparison {
  ComparisonGateComponent: [ComparisonComparisonGateComponent!]!
  Equals: [ComparisonEqualsEntity!]!
  GreaterThan: [ComparisonGreaterThanEntity!]!
  GreaterThanOrEquals: [ComparisonGreaterThanOrEqualsEntity!]!
  LowerThan: [ComparisonLowerThanEntity!]!
  LowerThanOrEquals: [ComparisonLowerThanOrEqualsEntity!]!
  NotEquals: [ComparisonNotEqualsEntity!]!
}

type config {
  ConfigFile: [ConfigConfigFileEntity!]!
  ConfigFileComponent: [ConfigConfigFileComponent!]!
}

type connector {
  BufferComponent: [ConnectorBufferComponent!]!
  BufferedFifoConnector: [ConnectorBufferedFifoConnectorRelation!]!
  ConnectorComponent: [ConnectorConnectorComponent!]!
  DebounceConnector: [ConnectorDebounceConnectorRelation!]!
  DebugConnector: [ConnectorDebugConnectorRelation!]!
  DecrementByConnector: [ConnectorDecrementByConnectorRelation!]!
  DefaultConnector: [ConnectorDefaultConnectorRelation!]!
  DelayConnector: [ConnectorDelayConnectorRelation!]!
  IncrementByConnector: [ConnectorIncrementByConnectorRelation!]!
  NumericInterpolationConnector: [ConnectorNumericInterpolationConnectorRelation!]!
  ParseFloatConnector: [ConnectorParseFloatConnectorRelation!]!
  ParseIntConnector: [ConnectorParseIntConnectorRelation!]!
  PropagationCounterComponent: [ConnectorPropagationCounterComponent!]!
  ThreadedConnector: [ConnectorThreadedConnectorRelation!]!
  ToStringConnector: [ConnectorToStringConnectorRelation!]!
  TraceConnector: [ConnectorTraceConnectorRelation!]!
}

type core {
  EventComponent: [CoreEventComponent!]!
  LabeledComponent: [CoreLabeledComponent!]!
  Shutdown: [CoreShutdownEntity!]!
  SystemEvent: [CoreSystemEventEntity!]!
}

type file {
  FileComponent: [FileFileComponent!]!
  FsNotifyComponent: [FileFsNotifyComponent!]!
}

type flow {
  GenericFlow: [FlowGenericFlowEntity!]!
}

type http {
  Http: [HttpHttpEntity!]!
  HttpComponent: [HttpHttpComponent!]!
  JsonRpc: [HttpJsonRpcEntity!]!
  JsonRpcComponent: [HttpJsonRpcComponent!]!
}

type json {
  ArrayContains: [JsonArrayContainsEntity!]!
  ArrayGetByIndex: [JsonArrayGetByIndexEntity!]!
  ArrayLength: [JsonArrayLengthEntity!]!
  ArrayPop: [JsonArrayPopEntity!]!
  ArrayPush: [JsonArrayPushEntity!]!
  ArrayReverse: [JsonArrayReverseEntity!]!
  LoadJson: [JsonLoadJsonEntity!]!
  LoadJsonComponent: [JsonLoadJsonComponent!]!
  ObjectGetProperty: [JsonObjectGetPropertyEntity!]!
  ObjectKeys: [JsonObjectKeysEntity!]!
  ObjectRemoveProperty: [JsonObjectRemovePropertyEntity!]!
  ObjectSetProperty: [JsonObjectSetPropertyEntity!]!
  SaveJson: [JsonSaveJsonEntity!]!
  SaveJsonComponent: [JsonSaveJsonComponent!]!
}

type logical {
  ActionComponent: [LogicalActionComponent!]!
  And: [LogicalAndEntity!]!
  And3: [LogicalAnd3Entity!]!
  ConditionComponent: [LogicalConditionComponent!]!
  GeneratorComponent: [LogicalGeneratorComponent!]!
  IfThenElse: [LogicalIfThenElseEntity!]!
  LogicalGateComponent: [LogicalLogicalGateComponent!]!
  LogicalOperationComponent: [LogicalLogicalOperationComponent!]!
  Nand: [LogicalNandEntity!]!
  Nor: [LogicalNorEntity!]!
  Not: [LogicalNotEntity!]!
  Or: [LogicalOrEntity!]!
  Toggle: [LogicalToggleEntity!]!
  Trigger: [LogicalTriggerEntity!]!
  Xnor: [LogicalXnorEntity!]!
  Xor: [LogicalXorEntity!]!
}

type metadata {
  DublinCoreComponent: [MetadataDublinCoreComponent!]!
  Id3Component: [MetadataId3Component!]!
}

type numeric {
  NumericGateComponent: [NumericNumericGateComponent!]!
  NumericOperationComponent: [NumericNumericOperationComponent!]!
}

type numeric_f64 {
  Abs: [NumericF64AbsEntity!]!
  Acos: [NumericF64AcosEntity!]!
  Acosh: [NumericF64AcoshEntity!]!
  Asin: [NumericF64AsinEntity!]!
  Asinh: [NumericF64AsinhEntity!]!
  Atan: [NumericF64AtanEntity!]!
  Atan2: [NumericF64Atan2Entity!]!
  Atanh: [NumericF64AtanhEntity!]!
  Cbrt: [NumericF64CbrtEntity!]!
  Ceil: [NumericF64CeilEntity!]!
  Cos: [NumericF64CosEntity!]!
  Cosh: [NumericF64CoshEntity!]!
  Exp: [NumericF64ExpEntity!]!
  Exp2: [NumericF64Exp2Entity!]!
  Floor: [NumericF64FloorEntity!]!
  Fract: [NumericF64FractEntity!]!
  Hypot: [NumericF64HypotEntity!]!
  Ln: [NumericF64LnEntity!]!
  Log: [NumericF64LogEntity!]!
  Log10: [NumericF64Log10Entity!]!
  Log2: [NumericF64Log2Entity!]!
  Pow: [NumericF64PowEntity!]!
  Recip: [NumericF64RecipEntity!]!
  Round: [NumericF64RoundEntity!]!
  Signum: [NumericF64SignumEntity!]!
  Sin: [NumericF64SinEntity!]!
  Sinh: [NumericF64SinhEntity!]!
  Sqrt: [NumericF64SqrtEntity!]!
  Tan: [NumericF64TanEntity!]!
  Tanh: [NumericF64TanhEntity!]!
  ToDegrees: [NumericF64ToDegreesEntity!]!
  ToRadians: [NumericF64ToRadiansEntity!]!
  Trunc: [NumericF64TruncEntity!]!
}

type numeric_i64 {
  Abs: [NumericI64AbsEntity!]!
  Signum: [NumericI64SignumEntity!]!
}

type random {
  RandomBool: [RandomRandomBoolEntity!]!
  RandomF64: [RandomRandomF64Entity!]!
  RandomF64Pseudo: [RandomRandomF64PseudoEntity!]!
  RandomF64Range: [RandomRandomF64RangeEntity!]!
  RandomI64: [RandomRandomI64Entity!]!
  RandomI64Pseudo: [RandomRandomI64PseudoEntity!]!
  RandomI64Range: [RandomRandomI64RangeEntity!]!
  RandomString: [RandomRandomStringEntity!]!
  RandomU64: [RandomRandomU64Entity!]!
  RandomU64Pseudo: [RandomRandomU64PseudoEntity!]!
  RandomU64Range: [RandomRandomU64RangeEntity!]!
  RandomUuid: [RandomRandomUuidEntity!]!
}

type state {
  StateArray: [StateStateArrayEntity!]!
  StateArrayComponent: [StateStateArrayComponent!]!
  StateBoolean: [StateStateBooleanEntity!]!
  StateBooleanComponent: [StateStateBooleanComponent!]!
  StateDebuggerDebugComponent: [StateStateDebuggerDebugComponent!]!
  StateDebuggerTraceComponent: [StateStateDebuggerTraceComponent!]!
  StateNumber: [StateStateNumberEntity!]!
  StateNumberComponent: [StateStateNumberComponent!]!
  StateObject: [StateStateObjectEntity!]!
  StateObjectComponent: [StateStateObjectComponent!]!
  StateString: [StateStateStringEntity!]!
  StateStringComponent: [StateStateStringComponent!]!
}

type string {
  CamelCase: [StringCamelCaseEntity!]!
  Capitalize: [StringCapitalizeEntity!]!
  CharCount: [StringCharCountEntity!]!
  CharCountGraphemes: [StringCharCountGraphemesEntity!]!
  ChopAfter: [StringChopAfterEntity!]!
  ChopAfterLast: [StringChopAfterLastEntity!]!
  ChopBefore: [StringChopBeforeEntity!]!
  ChopBeforeLast: [StringChopBeforeLastEntity!]!
  ChopRemovePrefix: [StringChopRemovePrefixEntity!]!
  ChopRemoveSuffix: [StringChopRemoveSuffixEntity!]!
  Concat: [StringConcatEntity!]!
  Contains: [StringContainsEntity!]!
  CountSubstrings: [StringCountSubstringsEntity!]!
  CountUniqueWords: [StringCountUniqueWordsEntity!]!
  CountWords: [StringCountWordsEntity!]!
  Decapitalize: [StringDecapitalizeEntity!]!
  EndsWith: [StringEndsWithEntity!]!
  EscapeHtml: [StringEscapeHtmlEntity!]!
  EscapeRegexp: [StringEscapeRegexpEntity!]!
  IsAlpha: [StringIsAlphaEntity!]!
  IsAlphaDigit: [StringIsAlphaDigitEntity!]!
  IsBlank: [StringIsBlankEntity!]!
  IsCamelCase: [StringIsCamelCaseEntity!]!
  IsCapitalize: [StringIsCapitalizeEntity!]!
  IsDecapitalize: [StringIsDecapitalizeEntity!]!
  IsDigit: [StringIsDigitEntity!]!
  IsEmpty: [StringIsEmptyEntity!]!
  IsKebabCase: [StringIsKebabCaseEntity!]!
  IsLowerFirst: [StringIsLowerFirstEntity!]!
  IsLowercase: [StringIsLowercaseEntity!]!
  IsNumeric: [StringIsNumericEntity!]!
  IsPascalCase: [StringIsPascalCaseEntity!]!
  IsShoutyKebabCase: [StringIsShoutyKebabCaseEntity!]!
  IsShoutySnakeCase: [StringIsShoutySnakeCaseEntity!]!
  IsSnakeCase: [StringIsSnakeCaseEntity!]!
  IsTitleCase: [StringIsTitleCaseEntity!]!
  IsTrainCase: [StringIsTrainCaseEntity!]!
  IsUpperFirst: [StringIsUpperFirstEntity!]!
  IsUppercase: [StringIsUppercaseEntity!]!
  KebabCase: [StringKebabCaseEntity!]!
  LowerFirst: [StringLowerFirstEntity!]!
  Lowercase: [StringLowercaseEntity!]!
  PascalCase: [StringPascalCaseEntity!]!
  Reverse: [StringReverseEntity!]!
  ShoutyKebabCase: [StringShoutyKebabCaseEntity!]!
  ShoutySnakeCase: [StringShoutySnakeCaseEntity!]!
  SnakeCase: [StringSnakeCaseEntity!]!
  StartsWith: [StringStartsWithEntity!]!
  StringBoolOperationComponent: [StringStringBoolOperationComponent!]!
  StringComparisonComponent: [StringStringComparisonComponent!]!
  StringGateComponent: [StringStringGateComponent!]!
  StringLength: [StringStringLengthEntity!]!
  StringNumberOperationComponent: [StringStringNumberOperationComponent!]!
  StringOperationComponent: [StringStringOperationComponent!]!
  StringStringNumberGateComponent: [StringStringStringNumberGateComponent!]!
  StripHtmlTags: [StringStripHtmlTagsEntity!]!
  SwapCase: [StringSwapCaseEntity!]!
  Templating: [StringTemplatingEntity!]!
  TitleCase: [StringTitleCaseEntity!]!
  TrainCase: [StringTrainCaseEntity!]!
  Trim: [StringTrimEntity!]!
  TrimEnd: [StringTrimEndEntity!]!
  TrimStart: [StringTrimStartEntity!]!
  UnescapeHtml: [StringUnescapeHtmlEntity!]!
  UpperFirst: [StringUpperFirstEntity!]!
  Uppercase: [StringUppercaseEntity!]!
}

type system {
  SystemEnv: [SystemSystemEnvEntity!]!
}

type taxonomy {
  CategorizedAs: [TaxonomyCategorizedAsRelation!]!
  Category: [TaxonomyCategoryEntity!]!
  HasSubcategory: [TaxonomyHasSubcategoryRelation!]!
  Tag: [TaxonomyTagEntity!]!
  TaggedWith: [TaxonomyTaggedWithRelation!]!
  WeightedComponent: [TaxonomyWeightedComponent!]!
}

type value {
  ValueArray: [ValueValueArrayEntity!]!
  ValueArrayComponent: [ValueValueArrayComponent!]!
  ValueBoolean: [ValueValueBooleanEntity!]!
  ValueBooleanComponent: [ValueValueBooleanComponent!]!
  ValueDebuggerDebugComponent: [ValueValueDebuggerDebugComponent!]!
  ValueDebuggerTraceComponent: [ValueValueDebuggerTraceComponent!]!
  ValueNumber: [ValueValueNumberEntity!]!
  ValueNumberComponent: [ValueValueNumberComponent!]!
  ValueObject: [ValueValueObjectEntity!]!
  ValueObjectComponent: [ValueValueObjectComponent!]!
  ValueString: [ValueValueStringEntity!]!
  ValueStringComponent: [ValueValueStringComponent!]!
}
