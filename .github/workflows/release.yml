name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - nightly
      - v[0-9]+.*
  workflow_run:
    workflows:
      - Rust
    branches:
      - main
    types:
      - completed
  # Run manually
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  CARGO_TERM_COLOR: always
  VERGEN_IDEMPOTENT: true
  AWS_LC_SYS_PREBUILT_NASM: 1

jobs:
  create-release:
    name: Create Release
    if: startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: VCS Checkout
        uses: actions/checkout@v4
      - name: Create GitHub Release
        uses: taiki-e/create-gh-release-action@v1
        with:
          changelog: CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }}
  upload-assets:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Tier 1
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          # Tier 1
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          # Tier 1
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          # Tier 2
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
          # Tier 1
          - target: x86_64-apple-darwin
            os: macos-latest
          # Tier 2
          - target: aarch64-apple-darwin
            os: macos-latest
          # Universal macOS binary is supported as universal-apple-darwin.
          - target: universal-apple-darwin
            os: macos-latest
          # Tier 1
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          # - target: x86_64-pc-windows-gnu
          #   os: ubuntu-latest
          # Tier 2
          # - target: aarch64-pc-windows-msvc
          #   os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: VCS Checkout
        uses: actions/checkout@v4
      # Required by arm targets
      - name: Install packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          # TODO: remove openssl
          packages: pkg-config openssl libssl-dev
          version: 1.1
        if: matrix.os == 'ubuntu-latest'
      - name: Upload Rust Binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: reactive-graph, reactive-graph-client, reactive-graph-server, reactive-graph-tooling
          target: ${{ matrix.target }}
          include: LICENSE.md,README.md,CHANGELOG.md,config,plugins
          tar: unix
          zip: windows
          leading_dir: true
          token: ${{ secrets.GITHUB_TOKEN }}
        if: startsWith(github.event.ref, 'refs/tags/v')
      - name: Upload Nightly Binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: reactive-graph, reactive-graph-client, reactive-graph-server, reactive-graph-tooling
          target: ${{ matrix.target }}
          include: LICENSE.md,README.md,CHANGELOG.md,config,plugins
          tar: unix
          zip: windows
          leading_dir: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/tags/nightly
        if: ${{ github.ref == 'refs/heads/main' }}
  crates-io:
    name: Publish on crates.io
    if: startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: VCS Checkout
        uses: actions/checkout@v4
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install cargo-workspaces
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-workspaces
      - name: Publish on crates.io
        run: cargo publish --from-git
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  debian-package:
    name: Publish debian package
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            # libc 2.31
            os: ubuntu-20.04
          - target: aarch64-unknown-linux-gnu
            # libc 2.31
            os: ubuntu-20.04
          - target: armv7-unknown-linux-gnueabihf
            # libc 2.31
            os: ubuntu-20.04
    runs-on: ${{ matrix.os }}
    steps:
      - name: VCS Checkout
        uses: actions/checkout@v4
      - name: Get version number from git tag
        id: tag
        uses: devops-actions/action-get-tag@v1.0.3
        with:
          strip_v: true
          default: nightly
      - name: Install aarch64 packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu
          version: 1.0
        if: matrix.target == 'aarch64-unknown-linux-gnu'
      - name: Install armv7 packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-arm-none-eabi gcc-arm-linux-gnueabihf
          version: 1.0
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Cargo Deb
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-deb
      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
      - name: Create Debian Package
        run: |
          cd ./crates/reactive-graph
          cargo deb -p reactive-graph --target=${{ matrix.target }} --deb-version ${{steps.tag.outputs.tag}}
        env:
          VERGEN_IDEMPOTENT: true
      - name: Upload debian package to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/debian/reactive-graph_*_*.deb
          file_glob: true
          tag: ${{ github.ref }}
