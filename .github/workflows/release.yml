name: Release
run-name: Release ${{ github.ref == 'refs/heads/main' && 'nightly' || github.ref_name }} by @${{ github.actor }}

permissions:
  contents: write

on:
  push:
    tags:
      - nightly
      - v[0-9]+.*
  workflow_run:
    workflows:
      - Rust
    branches:
      - main
    types:
      - completed
  # Run manually
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  CARGO_TERM_COLOR: always
  VERGEN_IDEMPOTENT: true
  AWS_LC_SYS_PREBUILT_NASM: 1

jobs:
  create-or-update-nightly-tag:
    name: Create or Update Nightly Tag
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    steps:
      - name: VCS Checkout
        uses: actions/checkout@v4
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Update Tag nightly
        continue-on-error: true
        run: |
          git config user.name "Reactive Graph"
          git config user.email "info@reactive-graph.io"
          git show nightly || true
          git log --oneline
          git tag -d nightly || true
          git tag --annotate --message "Nightly Release" --sign nightly || true
          git push --force origin nightly
          git show nightly || true
          git log --oneline --decorate
  create-release:
    name: Create Release
    if: startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    steps:
      - name: VCS Checkout
        uses: actions/checkout@v4
      - name: Create GitHub Release
        uses: taiki-e/create-gh-release-action@v1
        with:
          changelog: CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }}
  upload-assets:
    name: Upload Release Binaries
    needs: [ create-or-update-nightly-tag, create-release ]
    if: always() && (!contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled'))
    strategy:
      fail-fast: false
      matrix:
        include:
          # Tier 1
          # ARM64 Linux (kernel 4.1, glibc 2.17+)
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
          # ARM64 macOS (11.0+, Big Sur+)
          - target: aarch64-apple-darwin
            os: macos-latest
          # 32-bit Linux (kernel 3.2+, glibc 2.17+) 1
          - target: i686-unknown-linux-gnu
            os: ubuntu-22.04
          # 64-bit macOS (10.12+, Sierra+)
          - target: x86_64-apple-darwin
            os: macos-latest
          # 64-bit MSVC (Windows 10+, Windows Server 2016+)
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          # 64-bit Linux (kernel 3.2+, glibc 2.17+)
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          # Universal macOS binary is supported as universal-apple-darwin.
          - target: universal-apple-darwin
            os: macos-latest
          # Tier 2
          # ARM64 Linux with musl 1.2.3
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04
          # Armv7-A Linux, hardfloat (kernel 3.2, glibc 2.17)
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-22.04
          # 64-bit Linux with musl 1.2.3
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
    runs-on: ${{ matrix.os }}
    steps:
      - name: VCS Checkout
        uses: actions/checkout@v4
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install libclang1
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libclang1
          version: 1.0
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
      - name: Install bindgen-cli
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: bindgen-cli
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
      - name: Upload Regular Release Binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: reactive-graph,reactive-graph-client,reactive-graph-server,reactive-graph-tooling
          target: ${{ matrix.target }}
          archive: 'reactive-graph-$tag-$target'
          include: LICENSE.md,README.md,CHANGELOG.md,CODE_OF_CONDUCT.md,CONTRIBUTING.md,SECURITY.md,config,plugins
          tar: unix
          zip: windows
          leading_dir: true
          token: ${{ secrets.GITHUB_TOKEN }}
        if: startsWith(github.event.ref, 'refs/tags/v')
      - name: Upload Nightly Binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: reactive-graph,reactive-graph-client,reactive-graph-server,reactive-graph-tooling
          target: ${{ matrix.target }}
          archive: 'reactive-graph-nightly-$target'
          include: LICENSE.md,README.md,CHANGELOG.md,CODE_OF_CONDUCT.md,CONTRIBUTING.md,SECURITY.md,config,plugins
          tar: unix
          zip: windows
          leading_dir: true
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/tags/nightly
        if: github.ref == 'refs/heads/main'
  #  crates-io:
  #    name: Publish on crates.io
  #    if: startsWith(github.event.ref, 'refs/tags/v')
  #    runs-on: ubuntu-22.04
  #    steps:
  #      - name: VCS Checkout
  #        uses: actions/checkout@v4
  #      - name: Install rust toolchain
  #        uses: dtolnay/rust-toolchain@master
  #        with:
  #          toolchain: stable
  #      - name: Install cargo-workspaces
  #        uses: taiki-e/cache-cargo-install-action@v2
  #        with:
  #          tool: cargo-workspaces
  #      - name: Publish on crates.io
  #        run: cargo publish --from-git
  #        env:
  #          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  debian-package:
    name: Publish Debian Packages
    needs: [ create-or-update-nightly-tag, create-release ]
    if: always() && (!contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled'))
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            # libc 2.35
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-gnu
            # libc 2.35
            os: ubuntu-22.04
          - target: i686-unknown-linux-gnu
            # libc 2.35
            os: ubuntu-22.04
          - target: armv7-unknown-linux-gnueabihf
            # libc 2.35
            os: ubuntu-22.04
    runs-on: ${{ matrix.os }}
    steps:
      - name: VCS Checkout
        uses: actions/checkout@v4
      - name: Get version number from git tag
        id: tag
        uses: devops-actions/action-get-tag@v1.0.3
        with:
          strip_v: true
          default: nightly
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - name: Install aarch64 packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu
          version: 1.0
        if: matrix.target == 'aarch64-unknown-linux-gnu'
      - name: Install i686 packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-i686-linux-gnu gcc-i686-linux-gnu
          version: 1.0
        if: matrix.target == 'i686-unknown-linux-gnu'
      - name: Install armv7 packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: binutils-arm-none-eabi gcc-arm-linux-gnueabihf
          version: 1.0
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Cargo Deb
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-deb
      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
      - name: Create Regular Debian Package
        if: startsWith(github.event.ref, 'refs/tags/v')
        run: |
          cd ./crates/reactive-graph
          cargo deb -p reactive-graph --target=${{ matrix.target }} --deb-version ${{steps.tag.outputs.tag}}
        env:
          VERGEN_IDEMPOTENT: true
      - name: Create Nightly Debian Package
        if: github.ref == 'refs/heads/main'
        run: |
          cd ./crates/reactive-graph
          cargo deb -p reactive-graph --target=${{ matrix.target }} --deb-revision nightly
        env:
          VERGEN_IDEMPOTENT: true
      - name: Upload Regular Debian Package
        uses: svenstaro/upload-release-action@v2
        if: startsWith(github.event.ref, 'refs/tags/v')
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/debian/reactive-graph_*_*.deb
          file_glob: true
          tag: ${{ github.ref }}
      - name: Upload Nightly Debian Package
        uses: svenstaro/upload-release-action@v2
        if: github.ref == 'refs/heads/main'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/debian/reactive-graph_*_*.deb
          file_glob: true
          tag: 'nightly'
          overwrite: true
