[package]
name = "inexor-rgf-rt"
description = "Inexor - Reactive Graph Flow - Runtime"
version.workspace = true
authors.workspace = true
edition.workspace = true
license.workspace = true
repository.workspace = true
readme = "../../README.md"
keywords = [
    "reactive",
    "graph",
    "flow",
    "entity-system",
    "ecs"
]
categories = [
    "desktop-automation",
    "entity-component-system",
    "game-engine",
    "home-automation",
    "iot"
]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]

actix = { workspace = true }
actix-cors = { workspace = true }
actix-http = { workspace = true }
actix-rt = { workspace = true }
actix-web = { workspace = true, features = ["rustls"] }
actix-web-extras = { workspace = true }
# async-graphql features: uuid, chrono, url, log
async-graphql = { workspace = true, features = ["uuid", "dynamic-schema"] }
async-graphql-actix-web = { workspace = true }
async-trait = { workspace = true }
chrono = { workspace = true }
convert_case = { workspace = true }
crossbeam = { workspace = true }
dashmap = { workspace = true }
futures = { workspace = true }
futures-timer = { workspace = true }
futures-util = { workspace = true }
gql_client = "1.0.7"
http = { workspace = true }
json5 = { workspace = true }
lazy_static = { workspace = true }
libloading = { workspace = true }
log = { workspace = true, features = ["std", "serde"] }
mime = { workspace = true }
notify = { workspace = true }
paste = { workspace = true }
query_interface = { workspace = true }
path-tree = { workspace = true }
portpicker = { workspace = true }
rand = { workspace = true }
rayon = { workspace = true }
reqwest = { workspace = true, features = ["json"] }
rust-embed = { workspace = true, features = ["debug-embed", "compression"] }
rustls = { workspace = true }
rustls-pemfile = { workspace = true }
schemars = { workspace = true, features = ["uuid1"] }
semver = { workspace = true }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
signal-hook = { workspace = true }
strum = { workspace = true, features = ["derive"] }
strum_macros = { workspace = true }
tokio = { workspace = true, features =  ["macros", "time", "rt", "rt-multi-thread", "test-util"] }
toml = { workspace = true }
uuid = { version = "1.1", features = ["serde", "v4"] }
walkdir = { workspace = true }
wildmatch = { workspace = true }

inexor-rgf-behaviour = { version = "0.10.0", path = "../behaviour" }
inexor-rgf-core-config = { version = "0.10.0", path = "../core/config" }
inexor-rgf-core-di = { version = "0.10.0", path = "../core/di", features = [ "async" ] }
inexor-rgf-core-frp = { version = "0.10.0", path = "../core/frp" }
inexor-rgf-core-model = { version = "0.10.0", path = "../core/model" }
inexor-rgf-reactive = { version = "0.10.0", path = "../reactive" }
inexor-rgf-core-plugins = { version = "0.10.0", path = "../core/plugins" }
inexor-rgf-model-command = { version = "0.10.0", path = "../model/command" }
inexor-rgf-model-dynamic-graph = { version = "0.10.0", path = "../model/dynamic_graph" }
inexor-rgf-model-flow = { version = "0.10.0", path = "../model/flow" }
inexor-rgf-model-runtime = { version = "0.10.0", path = "../model/runtime" }

[dev-dependencies]
colored = { workspace = true }
default-test = { workspace = true }
futures-await-test = { workspace = true }
glob = { workspace = true }
log4rs = { workspace = true, features = ["console_appender", "ansi_writer"] }
similar = { workspace = true }
similar-asserts = { workspace = true }

inexor-rgf-core-model = { version = "0.10.0", path = "../core/model", features = ["test"] }
inexor-rgf-rt = { version = "0.10.0", path = ".", features = ["test"] }
inexor-rgf-test-utils = { version = "0.10.0", path = "../test-utils" }
#my-crate = {path = "../my-crate", features = ["test-utils"]}


[build-dependencies]
vergen = { version = "8.1.3", features = ["build", "cargo", "git", "gitcl", "rustc", "si"] }

[features]
test = []

[lib]
crate-type = ["lib"]

[[example]]
name = "simple_runtime"
